# coding: utf-8

"""
    ABIS REST API

    Innovatrics ABIS proprietary REST API

    The version of the OpenAPI document: 6.62.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictInt, StrictStr

from typing import Optional, Union

from abis.rest.client.models.applicant_identifier_response import ApplicantIdentifierResponse
from abis.rest.client.models.onboarding_applicant_request import OnboardingApplicantRequest
from abis.rest.client.models.onboarding_applicant_response import OnboardingApplicantResponse

from abis.rest.client.api_client import ApiClient
from abis.rest.client.api_response import ApiResponse
from abis.rest.client.rest import RESTResponseType


class OnboardingApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def enroll_onboarding(
        self,
        external_id: Annotated[StrictStr, Field(description="External Id of applicant being onboarded")],
        x_request_id: Annotated[Optional[StrictStr], Field(description="(idempotency) in case of retry returns previous success response")] = None,
        onboarding_applicant_request: Optional[OnboardingApplicantRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApplicantIdentifierResponse:
        """Attention this is experimental API and is subject to change.Onboards applicant with selfies, documents, liveness photos and its trust evaluated.


        :param external_id: External Id of applicant being onboarded (required)
        :type external_id: str
        :param x_request_id: (idempotency) in case of retry returns previous success response
        :type x_request_id: str
        :param onboarding_applicant_request:
        :type onboarding_applicant_request: OnboardingApplicantRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._enroll_onboarding_serialize(
            external_id=external_id,
            x_request_id=x_request_id,
            onboarding_applicant_request=onboarding_applicant_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApplicantIdentifierResponse",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def enroll_onboarding_with_http_info(
        self,
        external_id: Annotated[StrictStr, Field(description="External Id of applicant being onboarded")],
        x_request_id: Annotated[Optional[StrictStr], Field(description="(idempotency) in case of retry returns previous success response")] = None,
        onboarding_applicant_request: Optional[OnboardingApplicantRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ApplicantIdentifierResponse]:
        """Attention this is experimental API and is subject to change.Onboards applicant with selfies, documents, liveness photos and its trust evaluated.


        :param external_id: External Id of applicant being onboarded (required)
        :type external_id: str
        :param x_request_id: (idempotency) in case of retry returns previous success response
        :type x_request_id: str
        :param onboarding_applicant_request:
        :type onboarding_applicant_request: OnboardingApplicantRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._enroll_onboarding_serialize(
            external_id=external_id,
            x_request_id=x_request_id,
            onboarding_applicant_request=onboarding_applicant_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApplicantIdentifierResponse",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def enroll_onboarding_without_preload_content(
        self,
        external_id: Annotated[StrictStr, Field(description="External Id of applicant being onboarded")],
        x_request_id: Annotated[Optional[StrictStr], Field(description="(idempotency) in case of retry returns previous success response")] = None,
        onboarding_applicant_request: Optional[OnboardingApplicantRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Attention this is experimental API and is subject to change.Onboards applicant with selfies, documents, liveness photos and its trust evaluated.


        :param external_id: External Id of applicant being onboarded (required)
        :type external_id: str
        :param x_request_id: (idempotency) in case of retry returns previous success response
        :type x_request_id: str
        :param onboarding_applicant_request:
        :type onboarding_applicant_request: OnboardingApplicantRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._enroll_onboarding_serialize(
            external_id=external_id,
            x_request_id=x_request_id,
            onboarding_applicant_request=onboarding_applicant_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ApplicantIdentifierResponse",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _enroll_onboarding_serialize(
        self,
        external_id,
        x_request_id,
        onboarding_applicant_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if external_id is not None:
            _path_params['externalId'] = external_id
        # process the query parameters
        # process the header parameters
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter
        if onboarding_applicant_request is not None:
            _body_params = onboarding_applicant_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                '*/*'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oauth2', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/abis/v6/onboarding/applicants/{externalId}/enroll',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_document_page(
        self,
        external_id: Annotated[StrictStr, Field(description="External ID")],
        document_index: Annotated[StrictInt, Field(description="Document index, starts from 1")],
        page_index: Annotated[StrictInt, Field(description="Document page index, starts from 1")],
        x_request_id: Annotated[Optional[StrictStr], Field(description="(idempotency) in case of retry returns previous success response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bytearray:
        """Get onboarding applicant (identified by its external ID) document page. Document page is identified by document and page indexes.


        :param external_id: External ID (required)
        :type external_id: str
        :param document_index: Document index, starts from 1 (required)
        :type document_index: int
        :param page_index: Document page index, starts from 1 (required)
        :type page_index: int
        :param x_request_id: (idempotency) in case of retry returns previous success response
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_document_page_serialize(
            external_id=external_id,
            document_index=document_index,
            page_index=page_index,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_document_page_with_http_info(
        self,
        external_id: Annotated[StrictStr, Field(description="External ID")],
        document_index: Annotated[StrictInt, Field(description="Document index, starts from 1")],
        page_index: Annotated[StrictInt, Field(description="Document page index, starts from 1")],
        x_request_id: Annotated[Optional[StrictStr], Field(description="(idempotency) in case of retry returns previous success response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bytearray]:
        """Get onboarding applicant (identified by its external ID) document page. Document page is identified by document and page indexes.


        :param external_id: External ID (required)
        :type external_id: str
        :param document_index: Document index, starts from 1 (required)
        :type document_index: int
        :param page_index: Document page index, starts from 1 (required)
        :type page_index: int
        :param x_request_id: (idempotency) in case of retry returns previous success response
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_document_page_serialize(
            external_id=external_id,
            document_index=document_index,
            page_index=page_index,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_document_page_without_preload_content(
        self,
        external_id: Annotated[StrictStr, Field(description="External ID")],
        document_index: Annotated[StrictInt, Field(description="Document index, starts from 1")],
        page_index: Annotated[StrictInt, Field(description="Document page index, starts from 1")],
        x_request_id: Annotated[Optional[StrictStr], Field(description="(idempotency) in case of retry returns previous success response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get onboarding applicant (identified by its external ID) document page. Document page is identified by document and page indexes.


        :param external_id: External ID (required)
        :type external_id: str
        :param document_index: Document index, starts from 1 (required)
        :type document_index: int
        :param page_index: Document page index, starts from 1 (required)
        :type page_index: int
        :param x_request_id: (idempotency) in case of retry returns previous success response
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_document_page_serialize(
            external_id=external_id,
            document_index=document_index,
            page_index=page_index,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_document_page_serialize(
        self,
        external_id,
        document_index,
        page_index,
        x_request_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if external_id is not None:
            _path_params['externalId'] = external_id
        if document_index is not None:
            _path_params['documentIndex'] = document_index
        if page_index is not None:
            _path_params['pageIndex'] = page_index
        # process the query parameters
        # process the header parameters
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/octet-stream'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oauth2', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/abis/v6/onboarding/applicants/{externalId}/documents/{documentIndex}/pages/{pageIndex}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_liveness_photo(
        self,
        external_id: Annotated[StrictStr, Field(description="External ID")],
        liveness_photo_index: Annotated[StrictInt, Field(description="Liveness photo index, starts from 1")],
        x_request_id: Annotated[Optional[StrictStr], Field(description="(idempotency) in case of retry returns previous success response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bytearray:
        """Get onboarding applicant (identified by its external ID) liveness photo by its index


        :param external_id: External ID (required)
        :type external_id: str
        :param liveness_photo_index: Liveness photo index, starts from 1 (required)
        :type liveness_photo_index: int
        :param x_request_id: (idempotency) in case of retry returns previous success response
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_liveness_photo_serialize(
            external_id=external_id,
            liveness_photo_index=liveness_photo_index,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_liveness_photo_with_http_info(
        self,
        external_id: Annotated[StrictStr, Field(description="External ID")],
        liveness_photo_index: Annotated[StrictInt, Field(description="Liveness photo index, starts from 1")],
        x_request_id: Annotated[Optional[StrictStr], Field(description="(idempotency) in case of retry returns previous success response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bytearray]:
        """Get onboarding applicant (identified by its external ID) liveness photo by its index


        :param external_id: External ID (required)
        :type external_id: str
        :param liveness_photo_index: Liveness photo index, starts from 1 (required)
        :type liveness_photo_index: int
        :param x_request_id: (idempotency) in case of retry returns previous success response
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_liveness_photo_serialize(
            external_id=external_id,
            liveness_photo_index=liveness_photo_index,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_liveness_photo_without_preload_content(
        self,
        external_id: Annotated[StrictStr, Field(description="External ID")],
        liveness_photo_index: Annotated[StrictInt, Field(description="Liveness photo index, starts from 1")],
        x_request_id: Annotated[Optional[StrictStr], Field(description="(idempotency) in case of retry returns previous success response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get onboarding applicant (identified by its external ID) liveness photo by its index


        :param external_id: External ID (required)
        :type external_id: str
        :param liveness_photo_index: Liveness photo index, starts from 1 (required)
        :type liveness_photo_index: int
        :param x_request_id: (idempotency) in case of retry returns previous success response
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_liveness_photo_serialize(
            external_id=external_id,
            liveness_photo_index=liveness_photo_index,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_liveness_photo_serialize(
        self,
        external_id,
        liveness_photo_index,
        x_request_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if external_id is not None:
            _path_params['externalId'] = external_id
        if liveness_photo_index is not None:
            _path_params['livenessPhotoIndex'] = liveness_photo_index
        # process the query parameters
        # process the header parameters
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/octet-stream'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oauth2', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/abis/v6/onboarding/applicants/{externalId}/livenessPhotos/{livenessPhotoIndex}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_onboarding_applicant(
        self,
        external_id: StrictStr,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines how detailed data will be returned, when set to false only id, createdAt, updatedAt, enrolledAt, enrolledBy, exportedAt, exportedBy, gallery and customDetails are returned. When true a full onboarding applicant object is returned - trust factors, selfies, attachments and documents are included in response.")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="(idempotency) in case of retry returns previous success response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OnboardingApplicantResponse:
        """Get onboarding applicant by external ID


        :param external_id: (required)
        :type external_id: str
        :param full_response: Defines how detailed data will be returned, when set to false only id, createdAt, updatedAt, enrolledAt, enrolledBy, exportedAt, exportedBy, gallery and customDetails are returned. When true a full onboarding applicant object is returned - trust factors, selfies, attachments and documents are included in response.
        :type full_response: bool
        :param x_request_id: (idempotency) in case of retry returns previous success response
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_onboarding_applicant_serialize(
            external_id=external_id,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnboardingApplicantResponse",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_onboarding_applicant_with_http_info(
        self,
        external_id: StrictStr,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines how detailed data will be returned, when set to false only id, createdAt, updatedAt, enrolledAt, enrolledBy, exportedAt, exportedBy, gallery and customDetails are returned. When true a full onboarding applicant object is returned - trust factors, selfies, attachments and documents are included in response.")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="(idempotency) in case of retry returns previous success response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OnboardingApplicantResponse]:
        """Get onboarding applicant by external ID


        :param external_id: (required)
        :type external_id: str
        :param full_response: Defines how detailed data will be returned, when set to false only id, createdAt, updatedAt, enrolledAt, enrolledBy, exportedAt, exportedBy, gallery and customDetails are returned. When true a full onboarding applicant object is returned - trust factors, selfies, attachments and documents are included in response.
        :type full_response: bool
        :param x_request_id: (idempotency) in case of retry returns previous success response
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_onboarding_applicant_serialize(
            external_id=external_id,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnboardingApplicantResponse",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_onboarding_applicant_without_preload_content(
        self,
        external_id: StrictStr,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines how detailed data will be returned, when set to false only id, createdAt, updatedAt, enrolledAt, enrolledBy, exportedAt, exportedBy, gallery and customDetails are returned. When true a full onboarding applicant object is returned - trust factors, selfies, attachments and documents are included in response.")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="(idempotency) in case of retry returns previous success response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get onboarding applicant by external ID


        :param external_id: (required)
        :type external_id: str
        :param full_response: Defines how detailed data will be returned, when set to false only id, createdAt, updatedAt, enrolledAt, enrolledBy, exportedAt, exportedBy, gallery and customDetails are returned. When true a full onboarding applicant object is returned - trust factors, selfies, attachments and documents are included in response.
        :type full_response: bool
        :param x_request_id: (idempotency) in case of retry returns previous success response
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_onboarding_applicant_serialize(
            external_id=external_id,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnboardingApplicantResponse",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_onboarding_applicant_serialize(
        self,
        external_id,
        full_response,
        x_request_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if external_id is not None:
            _path_params['externalId'] = external_id
        # process the query parameters
        if full_response is not None:
            
            _query_params.append(('fullResponse', full_response))
            
        # process the header parameters
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                '*/*'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oauth2', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/abis/v6/onboarding/applicants/{externalId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_selfie_image(
        self,
        external_id: Annotated[StrictStr, Field(description="External ID")],
        selfie_index: Annotated[StrictInt, Field(description="Selfie index, starts from 1")],
        x_request_id: Annotated[Optional[StrictStr], Field(description="(idempotency) in case of retry returns previous success response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bytearray:
        """Get onboarding applicant (identified by its external ID) selfie image by its index


        :param external_id: External ID (required)
        :type external_id: str
        :param selfie_index: Selfie index, starts from 1 (required)
        :type selfie_index: int
        :param x_request_id: (idempotency) in case of retry returns previous success response
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_selfie_image_serialize(
            external_id=external_id,
            selfie_index=selfie_index,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_selfie_image_with_http_info(
        self,
        external_id: Annotated[StrictStr, Field(description="External ID")],
        selfie_index: Annotated[StrictInt, Field(description="Selfie index, starts from 1")],
        x_request_id: Annotated[Optional[StrictStr], Field(description="(idempotency) in case of retry returns previous success response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bytearray]:
        """Get onboarding applicant (identified by its external ID) selfie image by its index


        :param external_id: External ID (required)
        :type external_id: str
        :param selfie_index: Selfie index, starts from 1 (required)
        :type selfie_index: int
        :param x_request_id: (idempotency) in case of retry returns previous success response
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_selfie_image_serialize(
            external_id=external_id,
            selfie_index=selfie_index,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_selfie_image_without_preload_content(
        self,
        external_id: Annotated[StrictStr, Field(description="External ID")],
        selfie_index: Annotated[StrictInt, Field(description="Selfie index, starts from 1")],
        x_request_id: Annotated[Optional[StrictStr], Field(description="(idempotency) in case of retry returns previous success response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get onboarding applicant (identified by its external ID) selfie image by its index


        :param external_id: External ID (required)
        :type external_id: str
        :param selfie_index: Selfie index, starts from 1 (required)
        :type selfie_index: int
        :param x_request_id: (idempotency) in case of retry returns previous success response
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_selfie_image_serialize(
            external_id=external_id,
            selfie_index=selfie_index,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_selfie_image_serialize(
        self,
        external_id,
        selfie_index,
        x_request_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if external_id is not None:
            _path_params['externalId'] = external_id
        if selfie_index is not None:
            _path_params['selfieIndex'] = selfie_index
        # process the query parameters
        # process the header parameters
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/octet-stream'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oauth2', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/abis/v6/onboarding/applicants/{externalId}/selfies/{selfieIndex}/image',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_selfie_template(
        self,
        external_id: Annotated[StrictStr, Field(description="External ID")],
        selfie_index: Annotated[StrictInt, Field(description="Selfie index, starts from 1")],
        x_request_id: Annotated[Optional[StrictStr], Field(description="(idempotency) in case of retry returns previous success response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bytearray:
        """Get onboarding applicant (identified by its external ID) selfie template by its index


        :param external_id: External ID (required)
        :type external_id: str
        :param selfie_index: Selfie index, starts from 1 (required)
        :type selfie_index: int
        :param x_request_id: (idempotency) in case of retry returns previous success response
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_selfie_template_serialize(
            external_id=external_id,
            selfie_index=selfie_index,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_selfie_template_with_http_info(
        self,
        external_id: Annotated[StrictStr, Field(description="External ID")],
        selfie_index: Annotated[StrictInt, Field(description="Selfie index, starts from 1")],
        x_request_id: Annotated[Optional[StrictStr], Field(description="(idempotency) in case of retry returns previous success response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bytearray]:
        """Get onboarding applicant (identified by its external ID) selfie template by its index


        :param external_id: External ID (required)
        :type external_id: str
        :param selfie_index: Selfie index, starts from 1 (required)
        :type selfie_index: int
        :param x_request_id: (idempotency) in case of retry returns previous success response
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_selfie_template_serialize(
            external_id=external_id,
            selfie_index=selfie_index,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_selfie_template_without_preload_content(
        self,
        external_id: Annotated[StrictStr, Field(description="External ID")],
        selfie_index: Annotated[StrictInt, Field(description="Selfie index, starts from 1")],
        x_request_id: Annotated[Optional[StrictStr], Field(description="(idempotency) in case of retry returns previous success response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get onboarding applicant (identified by its external ID) selfie template by its index


        :param external_id: External ID (required)
        :type external_id: str
        :param selfie_index: Selfie index, starts from 1 (required)
        :type selfie_index: int
        :param x_request_id: (idempotency) in case of retry returns previous success response
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_selfie_template_serialize(
            external_id=external_id,
            selfie_index=selfie_index,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_selfie_template_serialize(
        self,
        external_id,
        selfie_index,
        x_request_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if external_id is not None:
            _path_params['externalId'] = external_id
        if selfie_index is not None:
            _path_params['selfieIndex'] = selfie_index
        # process the query parameters
        # process the header parameters
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/octet-stream'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oauth2', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/abis/v6/onboarding/applicants/{externalId}/selfies/{selfieIndex}/template',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


