# coding: utf-8

"""
    ABIS REST API

    Innovatrics ABIS proprietary REST API

    The version of the OpenAPI document: 6.62.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictStr

from typing import List, Optional

from abis.rest.client.models.detect_face_qualities_request import DetectFaceQualitiesRequest
from abis.rest.client.models.detect_face_qualities_response import DetectFaceQualitiesResponse
from abis.rest.client.models.extract_applicant_request import ExtractApplicantRequest
from abis.rest.client.models.extract_response import ExtractResponse
from abis.rest.client.models.identification_candidate import IdentificationCandidate
from abis.rest.client.models.identify_latent_probe_images_request import IdentifyLatentProbeImagesRequest
from abis.rest.client.models.identify_latent_probe_reference_request import IdentifyLatentProbeReferenceRequest
from abis.rest.client.models.identify_probe_by_images_request import IdentifyProbeByImagesRequest
from abis.rest.client.models.identify_probe_by_reference_request import IdentifyProbeByReferenceRequest
from abis.rest.client.models.identify_probe_by_templates_request import IdentifyProbeByTemplatesRequest
from abis.rest.client.models.latent_identification_candidate import LatentIdentificationCandidate
from abis.rest.client.models.latent_verification_candidate import LatentVerificationCandidate
from abis.rest.client.models.latent_verify_probe_images_images_request import LatentVerifyProbeImagesImagesRequest
from abis.rest.client.models.latent_verify_probe_images_references_request import LatentVerifyProbeImagesReferencesRequest
from abis.rest.client.models.verification_candidate import VerificationCandidate
from abis.rest.client.models.verify_probe_images_images_request import VerifyProbeImagesImagesRequest
from abis.rest.client.models.verify_probe_images_references_request import VerifyProbeImagesReferencesRequest
from abis.rest.client.models.verify_probe_images_templates_request import VerifyProbeImagesTemplatesRequest
from abis.rest.client.models.verify_probe_templates_images_request import VerifyProbeTemplatesImagesRequest
from abis.rest.client.models.verify_probe_templates_references_request import VerifyProbeTemplatesReferencesRequest
from abis.rest.client.models.verify_probe_templates_templates_request import VerifyProbeTemplatesTemplatesRequest

from abis.rest.client.api_client import ApiClient
from abis.rest.client.api_response import ApiResponse
from abis.rest.client.rest import RESTResponseType


class RPCApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def detect_face_qualities(
        self,
        detect_face_qualities_request: DetectFaceQualitiesRequest,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DetectFaceQualitiesResponse:
        """Get qualities based on a face image.

        Performs quality detection on a face image, returning all available qualities for a given image.

        :param detect_face_qualities_request: (required)
        :type detect_face_qualities_request: DetectFaceQualitiesRequest
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._detect_face_qualities_serialize(
            detect_face_qualities_request=detect_face_qualities_request,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DetectFaceQualitiesResponse",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def detect_face_qualities_with_http_info(
        self,
        detect_face_qualities_request: DetectFaceQualitiesRequest,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DetectFaceQualitiesResponse]:
        """Get qualities based on a face image.

        Performs quality detection on a face image, returning all available qualities for a given image.

        :param detect_face_qualities_request: (required)
        :type detect_face_qualities_request: DetectFaceQualitiesRequest
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._detect_face_qualities_serialize(
            detect_face_qualities_request=detect_face_qualities_request,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DetectFaceQualitiesResponse",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def detect_face_qualities_without_preload_content(
        self,
        detect_face_qualities_request: DetectFaceQualitiesRequest,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get qualities based on a face image.

        Performs quality detection on a face image, returning all available qualities for a given image.

        :param detect_face_qualities_request: (required)
        :type detect_face_qualities_request: DetectFaceQualitiesRequest
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._detect_face_qualities_serialize(
            detect_face_qualities_request=detect_face_qualities_request,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DetectFaceQualitiesResponse",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _detect_face_qualities_serialize(
        self,
        detect_face_qualities_request,
        x_request_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter
        if detect_face_qualities_request is not None:
            _body_params = detect_face_qualities_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                '*/*'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oauth2', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/abis/v6/detect/qualities/face',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def extract(
        self,
        extract_applicant_request: ExtractApplicantRequest,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ExtractResponse:
        """Performs single modality template extraction from modality images.

        Performs template extraction from modality images. Returns list of single modality templates. For fingerprint modality, list of extracted ICS templates is returned.

        :param extract_applicant_request: (required)
        :type extract_applicant_request: ExtractApplicantRequest
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._extract_serialize(
            extract_applicant_request=extract_applicant_request,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ExtractResponse",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def extract_with_http_info(
        self,
        extract_applicant_request: ExtractApplicantRequest,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ExtractResponse]:
        """Performs single modality template extraction from modality images.

        Performs template extraction from modality images. Returns list of single modality templates. For fingerprint modality, list of extracted ICS templates is returned.

        :param extract_applicant_request: (required)
        :type extract_applicant_request: ExtractApplicantRequest
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._extract_serialize(
            extract_applicant_request=extract_applicant_request,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ExtractResponse",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def extract_without_preload_content(
        self,
        extract_applicant_request: ExtractApplicantRequest,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Performs single modality template extraction from modality images.

        Performs template extraction from modality images. Returns list of single modality templates. For fingerprint modality, list of extracted ICS templates is returned.

        :param extract_applicant_request: (required)
        :type extract_applicant_request: ExtractApplicantRequest
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._extract_serialize(
            extract_applicant_request=extract_applicant_request,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ExtractResponse",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _extract_serialize(
        self,
        extract_applicant_request,
        x_request_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter
        if extract_applicant_request is not None:
            _body_params = extract_applicant_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                '*/*'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oauth2', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/abis/v6/extract',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def identify_latent_probe_by_images(
        self,
        identify_latent_probe_images_request: IdentifyLatentProbeImagesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="defines how detailed data will be returned")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[LatentIdentificationCandidate]:
        """Performs one-to-many latent identification using probe images.

        Performs one-to-many latent identification using probe images.

        :param identify_latent_probe_images_request: (required)
        :type identify_latent_probe_images_request: IdentifyLatentProbeImagesRequest
        :param full_response: defines how detailed data will be returned
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._identify_latent_probe_by_images_serialize(
            identify_latent_probe_images_request=identify_latent_probe_images_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[LatentIdentificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def identify_latent_probe_by_images_with_http_info(
        self,
        identify_latent_probe_images_request: IdentifyLatentProbeImagesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="defines how detailed data will be returned")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[LatentIdentificationCandidate]]:
        """Performs one-to-many latent identification using probe images.

        Performs one-to-many latent identification using probe images.

        :param identify_latent_probe_images_request: (required)
        :type identify_latent_probe_images_request: IdentifyLatentProbeImagesRequest
        :param full_response: defines how detailed data will be returned
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._identify_latent_probe_by_images_serialize(
            identify_latent_probe_images_request=identify_latent_probe_images_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[LatentIdentificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def identify_latent_probe_by_images_without_preload_content(
        self,
        identify_latent_probe_images_request: IdentifyLatentProbeImagesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="defines how detailed data will be returned")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Performs one-to-many latent identification using probe images.

        Performs one-to-many latent identification using probe images.

        :param identify_latent_probe_images_request: (required)
        :type identify_latent_probe_images_request: IdentifyLatentProbeImagesRequest
        :param full_response: defines how detailed data will be returned
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._identify_latent_probe_by_images_serialize(
            identify_latent_probe_images_request=identify_latent_probe_images_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[LatentIdentificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _identify_latent_probe_by_images_serialize(
        self,
        identify_latent_probe_images_request,
        full_response,
        x_request_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if full_response is not None:
            
            _query_params.append(('fullResponse', full_response))
            
        # process the header parameters
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter
        if identify_latent_probe_images_request is not None:
            _body_params = identify_latent_probe_images_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                '*/*'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oauth2', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/abis/v6/identify/latent/images',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def identify_latent_probe_by_reference(
        self,
        identify_latent_probe_reference_request: IdentifyLatentProbeReferenceRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="defines how detailed data will be returned")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[LatentIdentificationCandidate]:
        """Performs one-to-many latent identification using probe applicant from database. The applicant from database is identified by External ID or applicants internal ID. Only one identifier is allowed at a time.

        Performs one-to-many latent identification using probe applicant from database. The applicant from database is identified by External ID or applicants internal ID. Only one identifier is allowed at a time.

        :param identify_latent_probe_reference_request: (required)
        :type identify_latent_probe_reference_request: IdentifyLatentProbeReferenceRequest
        :param full_response: defines how detailed data will be returned
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._identify_latent_probe_by_reference_serialize(
            identify_latent_probe_reference_request=identify_latent_probe_reference_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[LatentIdentificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def identify_latent_probe_by_reference_with_http_info(
        self,
        identify_latent_probe_reference_request: IdentifyLatentProbeReferenceRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="defines how detailed data will be returned")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[LatentIdentificationCandidate]]:
        """Performs one-to-many latent identification using probe applicant from database. The applicant from database is identified by External ID or applicants internal ID. Only one identifier is allowed at a time.

        Performs one-to-many latent identification using probe applicant from database. The applicant from database is identified by External ID or applicants internal ID. Only one identifier is allowed at a time.

        :param identify_latent_probe_reference_request: (required)
        :type identify_latent_probe_reference_request: IdentifyLatentProbeReferenceRequest
        :param full_response: defines how detailed data will be returned
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._identify_latent_probe_by_reference_serialize(
            identify_latent_probe_reference_request=identify_latent_probe_reference_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[LatentIdentificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def identify_latent_probe_by_reference_without_preload_content(
        self,
        identify_latent_probe_reference_request: IdentifyLatentProbeReferenceRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="defines how detailed data will be returned")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Performs one-to-many latent identification using probe applicant from database. The applicant from database is identified by External ID or applicants internal ID. Only one identifier is allowed at a time.

        Performs one-to-many latent identification using probe applicant from database. The applicant from database is identified by External ID or applicants internal ID. Only one identifier is allowed at a time.

        :param identify_latent_probe_reference_request: (required)
        :type identify_latent_probe_reference_request: IdentifyLatentProbeReferenceRequest
        :param full_response: defines how detailed data will be returned
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._identify_latent_probe_by_reference_serialize(
            identify_latent_probe_reference_request=identify_latent_probe_reference_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[LatentIdentificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _identify_latent_probe_by_reference_serialize(
        self,
        identify_latent_probe_reference_request,
        full_response,
        x_request_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if full_response is not None:
            
            _query_params.append(('fullResponse', full_response))
            
        # process the header parameters
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter
        if identify_latent_probe_reference_request is not None:
            _body_params = identify_latent_probe_reference_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                '*/*'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oauth2', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/abis/v6/identify/latent/reference',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def identify_probe_by_images(
        self,
        identify_probe_by_images_request: IdentifyProbeByImagesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="defines how detailed data will be returned")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[IdentificationCandidate]:
        """Performs one-to-many identification using probe images.

        Performs one-to-many identification using probe images.

        :param identify_probe_by_images_request: (required)
        :type identify_probe_by_images_request: IdentifyProbeByImagesRequest
        :param full_response: defines how detailed data will be returned
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._identify_probe_by_images_serialize(
            identify_probe_by_images_request=identify_probe_by_images_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IdentificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def identify_probe_by_images_with_http_info(
        self,
        identify_probe_by_images_request: IdentifyProbeByImagesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="defines how detailed data will be returned")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[IdentificationCandidate]]:
        """Performs one-to-many identification using probe images.

        Performs one-to-many identification using probe images.

        :param identify_probe_by_images_request: (required)
        :type identify_probe_by_images_request: IdentifyProbeByImagesRequest
        :param full_response: defines how detailed data will be returned
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._identify_probe_by_images_serialize(
            identify_probe_by_images_request=identify_probe_by_images_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IdentificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def identify_probe_by_images_without_preload_content(
        self,
        identify_probe_by_images_request: IdentifyProbeByImagesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="defines how detailed data will be returned")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Performs one-to-many identification using probe images.

        Performs one-to-many identification using probe images.

        :param identify_probe_by_images_request: (required)
        :type identify_probe_by_images_request: IdentifyProbeByImagesRequest
        :param full_response: defines how detailed data will be returned
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._identify_probe_by_images_serialize(
            identify_probe_by_images_request=identify_probe_by_images_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IdentificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _identify_probe_by_images_serialize(
        self,
        identify_probe_by_images_request,
        full_response,
        x_request_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if full_response is not None:
            
            _query_params.append(('fullResponse', full_response))
            
        # process the header parameters
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter
        if identify_probe_by_images_request is not None:
            _body_params = identify_probe_by_images_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                '*/*'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oauth2', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/abis/v6/identify/images',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def identify_probe_by_reference(
        self,
        identify_probe_by_reference_request: IdentifyProbeByReferenceRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="defines how detailed data will be returned")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[IdentificationCandidate]:
        """Performs one-to-many identification using probe applicant from database. The applicant from database is identified by External ID or applicants internal ID. Only one identifier is allowed at a time.

        Performs one-to-many identification using probe applicant from database. The applicant from database is identified by External ID or applicants internal ID. Only one identifier is allowed at a time.

        :param identify_probe_by_reference_request: (required)
        :type identify_probe_by_reference_request: IdentifyProbeByReferenceRequest
        :param full_response: defines how detailed data will be returned
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._identify_probe_by_reference_serialize(
            identify_probe_by_reference_request=identify_probe_by_reference_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IdentificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def identify_probe_by_reference_with_http_info(
        self,
        identify_probe_by_reference_request: IdentifyProbeByReferenceRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="defines how detailed data will be returned")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[IdentificationCandidate]]:
        """Performs one-to-many identification using probe applicant from database. The applicant from database is identified by External ID or applicants internal ID. Only one identifier is allowed at a time.

        Performs one-to-many identification using probe applicant from database. The applicant from database is identified by External ID or applicants internal ID. Only one identifier is allowed at a time.

        :param identify_probe_by_reference_request: (required)
        :type identify_probe_by_reference_request: IdentifyProbeByReferenceRequest
        :param full_response: defines how detailed data will be returned
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._identify_probe_by_reference_serialize(
            identify_probe_by_reference_request=identify_probe_by_reference_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IdentificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def identify_probe_by_reference_without_preload_content(
        self,
        identify_probe_by_reference_request: IdentifyProbeByReferenceRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="defines how detailed data will be returned")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Performs one-to-many identification using probe applicant from database. The applicant from database is identified by External ID or applicants internal ID. Only one identifier is allowed at a time.

        Performs one-to-many identification using probe applicant from database. The applicant from database is identified by External ID or applicants internal ID. Only one identifier is allowed at a time.

        :param identify_probe_by_reference_request: (required)
        :type identify_probe_by_reference_request: IdentifyProbeByReferenceRequest
        :param full_response: defines how detailed data will be returned
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._identify_probe_by_reference_serialize(
            identify_probe_by_reference_request=identify_probe_by_reference_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IdentificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _identify_probe_by_reference_serialize(
        self,
        identify_probe_by_reference_request,
        full_response,
        x_request_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if full_response is not None:
            
            _query_params.append(('fullResponse', full_response))
            
        # process the header parameters
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter
        if identify_probe_by_reference_request is not None:
            _body_params = identify_probe_by_reference_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                '*/*'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oauth2', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/abis/v6/identify/reference',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def identify_probe_by_templates(
        self,
        identify_probe_by_templates_request: IdentifyProbeByTemplatesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="defines how detailed data will be returned")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[IdentificationCandidate]:
        """Performs one-to-many identification using probe single modality templates.

        Performs one-to-many identification using probe single modality templates.

        :param identify_probe_by_templates_request: (required)
        :type identify_probe_by_templates_request: IdentifyProbeByTemplatesRequest
        :param full_response: defines how detailed data will be returned
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._identify_probe_by_templates_serialize(
            identify_probe_by_templates_request=identify_probe_by_templates_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IdentificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def identify_probe_by_templates_with_http_info(
        self,
        identify_probe_by_templates_request: IdentifyProbeByTemplatesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="defines how detailed data will be returned")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[IdentificationCandidate]]:
        """Performs one-to-many identification using probe single modality templates.

        Performs one-to-many identification using probe single modality templates.

        :param identify_probe_by_templates_request: (required)
        :type identify_probe_by_templates_request: IdentifyProbeByTemplatesRequest
        :param full_response: defines how detailed data will be returned
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._identify_probe_by_templates_serialize(
            identify_probe_by_templates_request=identify_probe_by_templates_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IdentificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def identify_probe_by_templates_without_preload_content(
        self,
        identify_probe_by_templates_request: IdentifyProbeByTemplatesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="defines how detailed data will be returned")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Performs one-to-many identification using probe single modality templates.

        Performs one-to-many identification using probe single modality templates.

        :param identify_probe_by_templates_request: (required)
        :type identify_probe_by_templates_request: IdentifyProbeByTemplatesRequest
        :param full_response: defines how detailed data will be returned
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._identify_probe_by_templates_serialize(
            identify_probe_by_templates_request=identify_probe_by_templates_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[IdentificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _identify_probe_by_templates_serialize(
        self,
        identify_probe_by_templates_request,
        full_response,
        x_request_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if full_response is not None:
            
            _query_params.append(('fullResponse', full_response))
            
        # process the header parameters
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter
        if identify_probe_by_templates_request is not None:
            _body_params = identify_probe_by_templates_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                '*/*'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oauth2', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/abis/v6/identify/templates',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def verify_images_images(
        self,
        verify_probe_images_images_request: VerifyProbeImagesImagesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[VerificationCandidate]:
        """Performs one-to-one or one-to-few verification of probe images against images.

        Performs one-to-one or one-to-few verification of probe images against images.

        :param verify_probe_images_images_request: (required)
        :type verify_probe_images_images_request: VerifyProbeImagesImagesRequest
        :param full_response: Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_images_images_serialize(
            verify_probe_images_images_request=verify_probe_images_images_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[VerificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def verify_images_images_with_http_info(
        self,
        verify_probe_images_images_request: VerifyProbeImagesImagesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[VerificationCandidate]]:
        """Performs one-to-one or one-to-few verification of probe images against images.

        Performs one-to-one or one-to-few verification of probe images against images.

        :param verify_probe_images_images_request: (required)
        :type verify_probe_images_images_request: VerifyProbeImagesImagesRequest
        :param full_response: Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_images_images_serialize(
            verify_probe_images_images_request=verify_probe_images_images_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[VerificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def verify_images_images_without_preload_content(
        self,
        verify_probe_images_images_request: VerifyProbeImagesImagesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Performs one-to-one or one-to-few verification of probe images against images.

        Performs one-to-one or one-to-few verification of probe images against images.

        :param verify_probe_images_images_request: (required)
        :type verify_probe_images_images_request: VerifyProbeImagesImagesRequest
        :param full_response: Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_images_images_serialize(
            verify_probe_images_images_request=verify_probe_images_images_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[VerificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _verify_images_images_serialize(
        self,
        verify_probe_images_images_request,
        full_response,
        x_request_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if full_response is not None:
            
            _query_params.append(('fullResponse', full_response))
            
        # process the header parameters
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter
        if verify_probe_images_images_request is not None:
            _body_params = verify_probe_images_images_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                '*/*'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oauth2', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/abis/v6/verify/images/images',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def verify_images_references(
        self,
        verify_probe_images_references_request: VerifyProbeImagesReferencesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[VerificationCandidate]:
        """Performs one-to-one or one-to-few verification of probe images against applicants in database. Applicants in database are identified by External ID.

        Performs one-to-one or one-to-few verification of probe images against applicants in database. Applicants in database are identified by External ID.

        :param verify_probe_images_references_request: (required)
        :type verify_probe_images_references_request: VerifyProbeImagesReferencesRequest
        :param full_response: Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_images_references_serialize(
            verify_probe_images_references_request=verify_probe_images_references_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[VerificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def verify_images_references_with_http_info(
        self,
        verify_probe_images_references_request: VerifyProbeImagesReferencesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[VerificationCandidate]]:
        """Performs one-to-one or one-to-few verification of probe images against applicants in database. Applicants in database are identified by External ID.

        Performs one-to-one or one-to-few verification of probe images against applicants in database. Applicants in database are identified by External ID.

        :param verify_probe_images_references_request: (required)
        :type verify_probe_images_references_request: VerifyProbeImagesReferencesRequest
        :param full_response: Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_images_references_serialize(
            verify_probe_images_references_request=verify_probe_images_references_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[VerificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def verify_images_references_without_preload_content(
        self,
        verify_probe_images_references_request: VerifyProbeImagesReferencesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Performs one-to-one or one-to-few verification of probe images against applicants in database. Applicants in database are identified by External ID.

        Performs one-to-one or one-to-few verification of probe images against applicants in database. Applicants in database are identified by External ID.

        :param verify_probe_images_references_request: (required)
        :type verify_probe_images_references_request: VerifyProbeImagesReferencesRequest
        :param full_response: Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_images_references_serialize(
            verify_probe_images_references_request=verify_probe_images_references_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[VerificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _verify_images_references_serialize(
        self,
        verify_probe_images_references_request,
        full_response,
        x_request_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if full_response is not None:
            
            _query_params.append(('fullResponse', full_response))
            
        # process the header parameters
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter
        if verify_probe_images_references_request is not None:
            _body_params = verify_probe_images_references_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                '*/*'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oauth2', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/abis/v6/verify/images/references',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def verify_images_templates(
        self,
        verify_probe_images_templates_request: VerifyProbeImagesTemplatesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[VerificationCandidate]:
        """Performs one-to-one or one-to-few verification of probe images against single modality templates.

        Performs one-to-one or one-to-few verification of probe images against single modality templates.

        :param verify_probe_images_templates_request: (required)
        :type verify_probe_images_templates_request: VerifyProbeImagesTemplatesRequest
        :param full_response: Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_images_templates_serialize(
            verify_probe_images_templates_request=verify_probe_images_templates_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[VerificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def verify_images_templates_with_http_info(
        self,
        verify_probe_images_templates_request: VerifyProbeImagesTemplatesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[VerificationCandidate]]:
        """Performs one-to-one or one-to-few verification of probe images against single modality templates.

        Performs one-to-one or one-to-few verification of probe images against single modality templates.

        :param verify_probe_images_templates_request: (required)
        :type verify_probe_images_templates_request: VerifyProbeImagesTemplatesRequest
        :param full_response: Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_images_templates_serialize(
            verify_probe_images_templates_request=verify_probe_images_templates_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[VerificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def verify_images_templates_without_preload_content(
        self,
        verify_probe_images_templates_request: VerifyProbeImagesTemplatesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Performs one-to-one or one-to-few verification of probe images against single modality templates.

        Performs one-to-one or one-to-few verification of probe images against single modality templates.

        :param verify_probe_images_templates_request: (required)
        :type verify_probe_images_templates_request: VerifyProbeImagesTemplatesRequest
        :param full_response: Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_images_templates_serialize(
            verify_probe_images_templates_request=verify_probe_images_templates_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[VerificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _verify_images_templates_serialize(
        self,
        verify_probe_images_templates_request,
        full_response,
        x_request_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if full_response is not None:
            
            _query_params.append(('fullResponse', full_response))
            
        # process the header parameters
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter
        if verify_probe_images_templates_request is not None:
            _body_params = verify_probe_images_templates_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                '*/*'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oauth2', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/abis/v6/verify/images/templates',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def verify_latent_images_images(
        self,
        latent_verify_probe_images_images_request: LatentVerifyProbeImagesImagesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[LatentVerificationCandidate]:
        """Performs one-to-one or one-to-few latent verification of probe images against images.

        Performs one-to-one or one-to-few latent verification of probe images against images.

        :param latent_verify_probe_images_images_request: (required)
        :type latent_verify_probe_images_images_request: LatentVerifyProbeImagesImagesRequest
        :param full_response: Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_latent_images_images_serialize(
            latent_verify_probe_images_images_request=latent_verify_probe_images_images_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[LatentVerificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def verify_latent_images_images_with_http_info(
        self,
        latent_verify_probe_images_images_request: LatentVerifyProbeImagesImagesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[LatentVerificationCandidate]]:
        """Performs one-to-one or one-to-few latent verification of probe images against images.

        Performs one-to-one or one-to-few latent verification of probe images against images.

        :param latent_verify_probe_images_images_request: (required)
        :type latent_verify_probe_images_images_request: LatentVerifyProbeImagesImagesRequest
        :param full_response: Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_latent_images_images_serialize(
            latent_verify_probe_images_images_request=latent_verify_probe_images_images_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[LatentVerificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def verify_latent_images_images_without_preload_content(
        self,
        latent_verify_probe_images_images_request: LatentVerifyProbeImagesImagesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Performs one-to-one or one-to-few latent verification of probe images against images.

        Performs one-to-one or one-to-few latent verification of probe images against images.

        :param latent_verify_probe_images_images_request: (required)
        :type latent_verify_probe_images_images_request: LatentVerifyProbeImagesImagesRequest
        :param full_response: Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_latent_images_images_serialize(
            latent_verify_probe_images_images_request=latent_verify_probe_images_images_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[LatentVerificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _verify_latent_images_images_serialize(
        self,
        latent_verify_probe_images_images_request,
        full_response,
        x_request_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if full_response is not None:
            
            _query_params.append(('fullResponse', full_response))
            
        # process the header parameters
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter
        if latent_verify_probe_images_images_request is not None:
            _body_params = latent_verify_probe_images_images_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                '*/*'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oauth2', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/abis/v6/verify/latent/images/images',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def verify_latent_images_references(
        self,
        latent_verify_probe_images_references_request: LatentVerifyProbeImagesReferencesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[LatentVerificationCandidate]:
        """Performs one-to-one or one-to-few latent verification of probe images against applicants in database. Applicants in database are identified by External ID.

        Performs one-to-one or one-to-few latent verification of probe images against applicants in database. Applicants in database are identified by External ID.

        :param latent_verify_probe_images_references_request: (required)
        :type latent_verify_probe_images_references_request: LatentVerifyProbeImagesReferencesRequest
        :param full_response: Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_latent_images_references_serialize(
            latent_verify_probe_images_references_request=latent_verify_probe_images_references_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[LatentVerificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def verify_latent_images_references_with_http_info(
        self,
        latent_verify_probe_images_references_request: LatentVerifyProbeImagesReferencesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[LatentVerificationCandidate]]:
        """Performs one-to-one or one-to-few latent verification of probe images against applicants in database. Applicants in database are identified by External ID.

        Performs one-to-one or one-to-few latent verification of probe images against applicants in database. Applicants in database are identified by External ID.

        :param latent_verify_probe_images_references_request: (required)
        :type latent_verify_probe_images_references_request: LatentVerifyProbeImagesReferencesRequest
        :param full_response: Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_latent_images_references_serialize(
            latent_verify_probe_images_references_request=latent_verify_probe_images_references_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[LatentVerificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def verify_latent_images_references_without_preload_content(
        self,
        latent_verify_probe_images_references_request: LatentVerifyProbeImagesReferencesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Performs one-to-one or one-to-few latent verification of probe images against applicants in database. Applicants in database are identified by External ID.

        Performs one-to-one or one-to-few latent verification of probe images against applicants in database. Applicants in database are identified by External ID.

        :param latent_verify_probe_images_references_request: (required)
        :type latent_verify_probe_images_references_request: LatentVerifyProbeImagesReferencesRequest
        :param full_response: Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_latent_images_references_serialize(
            latent_verify_probe_images_references_request=latent_verify_probe_images_references_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[LatentVerificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _verify_latent_images_references_serialize(
        self,
        latent_verify_probe_images_references_request,
        full_response,
        x_request_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if full_response is not None:
            
            _query_params.append(('fullResponse', full_response))
            
        # process the header parameters
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter
        if latent_verify_probe_images_references_request is not None:
            _body_params = latent_verify_probe_images_references_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                '*/*'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oauth2', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/abis/v6/verify/latent/images/references',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def verify_templates_images(
        self,
        verify_probe_templates_images_request: VerifyProbeTemplatesImagesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[VerificationCandidate]:
        """Performs one-to-one or one-to-few verification of probe templates against images.

        Performs one-to-one or one-to-few verification of probe templates against images.

        :param verify_probe_templates_images_request: (required)
        :type verify_probe_templates_images_request: VerifyProbeTemplatesImagesRequest
        :param full_response: Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_templates_images_serialize(
            verify_probe_templates_images_request=verify_probe_templates_images_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[VerificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def verify_templates_images_with_http_info(
        self,
        verify_probe_templates_images_request: VerifyProbeTemplatesImagesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[VerificationCandidate]]:
        """Performs one-to-one or one-to-few verification of probe templates against images.

        Performs one-to-one or one-to-few verification of probe templates against images.

        :param verify_probe_templates_images_request: (required)
        :type verify_probe_templates_images_request: VerifyProbeTemplatesImagesRequest
        :param full_response: Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_templates_images_serialize(
            verify_probe_templates_images_request=verify_probe_templates_images_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[VerificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def verify_templates_images_without_preload_content(
        self,
        verify_probe_templates_images_request: VerifyProbeTemplatesImagesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Performs one-to-one or one-to-few verification of probe templates against images.

        Performs one-to-one or one-to-few verification of probe templates against images.

        :param verify_probe_templates_images_request: (required)
        :type verify_probe_templates_images_request: VerifyProbeTemplatesImagesRequest
        :param full_response: Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_templates_images_serialize(
            verify_probe_templates_images_request=verify_probe_templates_images_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[VerificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _verify_templates_images_serialize(
        self,
        verify_probe_templates_images_request,
        full_response,
        x_request_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if full_response is not None:
            
            _query_params.append(('fullResponse', full_response))
            
        # process the header parameters
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter
        if verify_probe_templates_images_request is not None:
            _body_params = verify_probe_templates_images_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                '*/*'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oauth2', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/abis/v6/verify/templates/images',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def verify_templates_references(
        self,
        verify_probe_templates_references_request: VerifyProbeTemplatesReferencesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[VerificationCandidate]:
        """Performs one-to-one or one-to-few verification of probe templates against applicants in database. Applicants in database are identified by External ID.

        Performs one-to-one or one-to-few verification of probe templates against applicants in database. Applicants in database are identified by External ID.

        :param verify_probe_templates_references_request: (required)
        :type verify_probe_templates_references_request: VerifyProbeTemplatesReferencesRequest
        :param full_response: Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_templates_references_serialize(
            verify_probe_templates_references_request=verify_probe_templates_references_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[VerificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def verify_templates_references_with_http_info(
        self,
        verify_probe_templates_references_request: VerifyProbeTemplatesReferencesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[VerificationCandidate]]:
        """Performs one-to-one or one-to-few verification of probe templates against applicants in database. Applicants in database are identified by External ID.

        Performs one-to-one or one-to-few verification of probe templates against applicants in database. Applicants in database are identified by External ID.

        :param verify_probe_templates_references_request: (required)
        :type verify_probe_templates_references_request: VerifyProbeTemplatesReferencesRequest
        :param full_response: Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_templates_references_serialize(
            verify_probe_templates_references_request=verify_probe_templates_references_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[VerificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def verify_templates_references_without_preload_content(
        self,
        verify_probe_templates_references_request: VerifyProbeTemplatesReferencesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Performs one-to-one or one-to-few verification of probe templates against applicants in database. Applicants in database are identified by External ID.

        Performs one-to-one or one-to-few verification of probe templates against applicants in database. Applicants in database are identified by External ID.

        :param verify_probe_templates_references_request: (required)
        :type verify_probe_templates_references_request: VerifyProbeTemplatesReferencesRequest
        :param full_response: Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_templates_references_serialize(
            verify_probe_templates_references_request=verify_probe_templates_references_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[VerificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _verify_templates_references_serialize(
        self,
        verify_probe_templates_references_request,
        full_response,
        x_request_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if full_response is not None:
            
            _query_params.append(('fullResponse', full_response))
            
        # process the header parameters
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter
        if verify_probe_templates_references_request is not None:
            _body_params = verify_probe_templates_references_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                '*/*'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oauth2', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/abis/v6/verify/templates/references',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def verify_templates_templates(
        self,
        verify_probe_templates_templates_request: VerifyProbeTemplatesTemplatesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[VerificationCandidate]:
        """Performs one-to-one or one-to-few verification of probe templates against single modality templates.

        Performs one-to-one or one-to-few verification of probe templates against single modality templates.

        :param verify_probe_templates_templates_request: (required)
        :type verify_probe_templates_templates_request: VerifyProbeTemplatesTemplatesRequest
        :param full_response: Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_templates_templates_serialize(
            verify_probe_templates_templates_request=verify_probe_templates_templates_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[VerificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def verify_templates_templates_with_http_info(
        self,
        verify_probe_templates_templates_request: VerifyProbeTemplatesTemplatesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[VerificationCandidate]]:
        """Performs one-to-one or one-to-few verification of probe templates against single modality templates.

        Performs one-to-one or one-to-few verification of probe templates against single modality templates.

        :param verify_probe_templates_templates_request: (required)
        :type verify_probe_templates_templates_request: VerifyProbeTemplatesTemplatesRequest
        :param full_response: Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_templates_templates_serialize(
            verify_probe_templates_templates_request=verify_probe_templates_templates_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[VerificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def verify_templates_templates_without_preload_content(
        self,
        verify_probe_templates_templates_request: VerifyProbeTemplatesTemplatesRequest,
        full_response: Annotated[Optional[StrictBool], Field(description="Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="X-Request-ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Performs one-to-one or one-to-few verification of probe templates against single modality templates.

        Performs one-to-one or one-to-few verification of probe templates against single modality templates.

        :param verify_probe_templates_templates_request: (required)
        :type verify_probe_templates_templates_request: VerifyProbeTemplatesTemplatesRequest
        :param full_response: Defines whether or not partial scores for all combinations of biometric data will be returned (i.e. also scores for e.g. left index vs right middle finger)
        :type full_response: bool
        :param x_request_id: X-Request-ID
        :type x_request_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_templates_templates_serialize(
            verify_probe_templates_templates_request=verify_probe_templates_templates_request,
            full_response=full_response,
            x_request_id=x_request_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[VerificationCandidate]",
            '400': "ErrorResponseStandard",
            '429': "ErrorResponseStandard",
            '500': "ErrorResponseStandard",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _verify_templates_templates_serialize(
        self,
        verify_probe_templates_templates_request,
        full_response,
        x_request_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if full_response is not None:
            
            _query_params.append(('fullResponse', full_response))
            
        # process the header parameters
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter
        if verify_probe_templates_templates_request is not None:
            _body_params = verify_probe_templates_templates_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                '*/*'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth', 
            'oauth2', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/abis/v6/verify/templates/templates',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


