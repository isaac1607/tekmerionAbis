# coding: utf-8

"""
    ABIS REST API

    Innovatrics ABIS proprietary REST API

    The version of the OpenAPI document: 6.62.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AdjudicationReport(BaseModel):
    """
    AdjudicationReport
    """ # noqa: E501
    attachment: Optional[StrictStr] = None
    attachment_note: Optional[StrictStr] = Field(default=None, alias="attachmentNote")
    face: Optional[StrictStr] = None
    face_note: Optional[StrictStr] = Field(default=None, alias="faceNote")
    fingerprint: Optional[StrictStr] = None
    fingerprint_note: Optional[StrictStr] = Field(default=None, alias="fingerprintNote")
    iris: Optional[StrictStr] = None
    iris_note: Optional[StrictStr] = Field(default=None, alias="irisNote")
    note: Optional[StrictStr] = None
    palmprint: Optional[StrictStr] = None
    palmprint_note: Optional[StrictStr] = Field(default=None, alias="palmprintNote")
    personal_data: Optional[StrictStr] = Field(default=None, alias="personalData")
    personal_data_note: Optional[StrictStr] = Field(default=None, alias="personalDataNote")
    signature: Optional[StrictStr] = None
    signature_note: Optional[StrictStr] = Field(default=None, alias="signatureNote")
    __properties: ClassVar[List[str]] = ["attachment", "attachmentNote", "face", "faceNote", "fingerprint", "fingerprintNote", "iris", "irisNote", "note", "palmprint", "palmprintNote", "personalData", "personalDataNote", "signature", "signatureNote"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AdjudicationReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AdjudicationReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attachment": obj.get("attachment"),
            "attachmentNote": obj.get("attachmentNote"),
            "face": obj.get("face"),
            "faceNote": obj.get("faceNote"),
            "fingerprint": obj.get("fingerprint"),
            "fingerprintNote": obj.get("fingerprintNote"),
            "iris": obj.get("iris"),
            "irisNote": obj.get("irisNote"),
            "note": obj.get("note"),
            "palmprint": obj.get("palmprint"),
            "palmprintNote": obj.get("palmprintNote"),
            "personalData": obj.get("personalData"),
            "personalDataNote": obj.get("personalDataNote"),
            "signature": obj.get("signature"),
            "signatureNote": obj.get("signatureNote")
        })
        return _obj


