# coding: utf-8

"""
    ABIS REST API

    Innovatrics ABIS proprietary REST API

    The version of the OpenAPI document: 6.62.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBytes, StrictStr
from pydantic import Field
from abis.rest.client.models.file import File
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Attachment(BaseModel):
    """
    Attachment
    """ # noqa: E501
    data_bytes: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, alias="dataBytes")
    data_url: Optional[StrictStr] = Field(default=None, alias="dataUrl")
    description: Optional[StrictStr] = None
    external_file_reference: Optional[StrictStr] = Field(default=None, alias="externalFileReference")
    file: Optional[File] = None
    filename: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    name_code: Optional[StrictStr] = Field(default='OTHER', alias="nameCode")
    __properties: ClassVar[List[str]] = ["dataBytes", "dataUrl", "description", "externalFileReference", "file", "filename", "name", "nameCode"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Attachment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of file
        if self.file:
            _dict['file'] = self.file.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Attachment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataBytes": obj.get("dataBytes"),
            "dataUrl": obj.get("dataUrl"),
            "description": obj.get("description"),
            "externalFileReference": obj.get("externalFileReference"),
            "file": File.from_dict(obj.get("file")) if obj.get("file") is not None else None,
            "filename": obj.get("filename"),
            "name": obj.get("name"),
            "nameCode": obj.get("nameCode") if obj.get("nameCode") is not None else 'OTHER'
        })
        return _obj


