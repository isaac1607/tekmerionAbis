# coding: utf-8

"""
    ABIS REST API

    Innovatrics ABIS proprietary REST API

    The version of the OpenAPI document: 6.62.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from abis.rest.client.models.applicant_custom_details import ApplicantCustomDetails
from abis.rest.client.models.attachment import Attachment
from abis.rest.client.models.document import Document
from abis.rest.client.models.identify_candidate import IdentifyCandidate
from abis.rest.client.models.liveness_photo import LivenessPhoto
from abis.rest.client.models.selfie import Selfie
from abis.rest.client.models.trust_factor import TrustFactor
from abis.rest.client.models.onboarding_extraction_parameters import OnboardingExtractionParameters
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OnboardingApplicantRequest(BaseModel):
    """
    OnboardingApplicantRequest
    """ # noqa: E501
    attachments: Optional[List[Attachment]] = None
    category: Optional[StrictStr] = None
    custom_details: Optional[ApplicantCustomDetails] = Field(default=None, alias="customDetails")
    documents: Optional[List[Document]] = None
    enrolled_at: Optional[datetime] = Field(default=None, description="A date-time format in the ISO-8601 calendar system", alias="enrolledAt")
    enrolled_by: Optional[StrictStr] = Field(default=None, alias="enrolledBy")
    enrollment_device: Optional[StrictStr] = Field(default=None, alias="enrollmentDevice")
    exported_at: Optional[datetime] = Field(default=None, description="A date-time format in the ISO-8601 calendar system", alias="exportedAt")
    exported_by: Optional[StrictStr] = Field(default=None, alias="exportedBy")
    external_id: Optional[StrictStr] = Field(default=None, description="External Identifier", alias="externalId")
    extraction_parameters: Optional[OnboardingExtractionParameters] = Field(default=None, alias="extractionParameters")
    gallery: Optional[StrictStr] = None
    identify_candidates: Optional[List[IdentifyCandidate]] = Field(default=None, alias="identifyCandidates")
    liveness_photos: Optional[List[LivenessPhoto]] = Field(default=None, alias="livenessPhotos")
    origin_external_id: Optional[StrictStr] = Field(default=None, description="Origin External Identifier", alias="originExternalId")
    selfies: Optional[List[Selfie]] = None
    status: Optional[StrictStr] = Field(default=None, description="Applicant in the AFIS has a status which may change in time as a result of automatic or manual action.")
    trust_factors: Optional[List[TrustFactor]] = Field(default=None, alias="trustFactors")
    __properties: ClassVar[List[str]] = ["attachments", "category", "customDetails", "documents", "enrolledAt", "enrolledBy", "enrollmentDevice", "exportedAt", "exportedBy", "externalId", "extractionParameters", "gallery", "identifyCandidates", "livenessPhotos", "originExternalId", "selfies", "status", "trustFactors"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('archived', 'captured', 'enrolled', 'deleted', 'duplicate', 'end_of_life', 'master', 'mismatched', 'rejected', 'suspect', 'void', 'declined', 'review', 'ready', 'draft', 'under_review'):
            raise ValueError("must be one of enum values ('archived', 'captured', 'enrolled', 'deleted', 'duplicate', 'end_of_life', 'master', 'mismatched', 'rejected', 'suspect', 'void', 'declined', 'review', 'ready', 'draft', 'under_review')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OnboardingApplicantRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_details
        if self.custom_details:
            _dict['customDetails'] = self.custom_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extraction_parameters
        if self.extraction_parameters:
            _dict['extractionParameters'] = self.extraction_parameters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OnboardingApplicantRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "customDetails": ApplicantCustomDetails.from_dict(obj.get("customDetails")) if obj.get("customDetails") is not None else None,
            "enrolledAt": obj.get("enrolledAt"),
            "enrolledBy": obj.get("enrolledBy"),
            "enrollmentDevice": obj.get("enrollmentDevice"),
            "exportedAt": obj.get("exportedAt"),
            "exportedBy": obj.get("exportedBy"),
            "externalId": obj.get("externalId"),
            "extractionParameters": OnboardingExtractionParameters.from_dict(obj.get("extractionParameters")) if obj.get("extractionParameters") is not None else None,
            "gallery": obj.get("gallery"),
            "originExternalId": obj.get("originExternalId"),
            "status": obj.get("status"),
        })
        return _obj


