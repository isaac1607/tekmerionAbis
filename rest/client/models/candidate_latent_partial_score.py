# coding: utf-8

"""
    ABIS REST API

    Innovatrics ABIS proprietary REST API

    The version of the OpenAPI document: 6.62.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CandidateLatentPartialScore(BaseModel):
    """
    CandidateLatentPartialScore
    """ # noqa: E501
    probe_fingerprint_position: Optional[StrictStr] = Field(default=None, alias="probeFingerprintPosition")
    probe_latent_position: Optional[StrictStr] = Field(default=None, alias="probeLatentPosition")
    probe_palmprint_position: Optional[StrictStr] = Field(default=None, alias="probePalmprintPosition")
    reference_fingerprint_position: Optional[StrictStr] = Field(default=None, alias="referenceFingerprintPosition")
    reference_latent_position: Optional[StrictStr] = Field(default=None, alias="referenceLatentPosition")
    reference_palmprint_position: Optional[StrictStr] = Field(default=None, alias="referencePalmprintPosition")
    score: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["probeFingerprintPosition", "probeLatentPosition", "probePalmprintPosition", "referenceFingerprintPosition", "referenceLatentPosition", "referencePalmprintPosition", "score"]

    @field_validator('probe_fingerprint_position')
    def probe_fingerprint_position_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('UNKNOWN_FINGER', 'RIGHT_THUMB', 'RIGHT_INDEX', 'RIGHT_MIDDLE', 'RIGHT_RING', 'RIGHT_LITTLE', 'LEFT_THUMB', 'LEFT_INDEX', 'LEFT_MIDDLE', 'LEFT_RING', 'LEFT_LITTLE', 'PLAIN_RIGHT_THUMB', 'PLAIN_LEFT_THUMB', 'PLAIN_RIGHT_FOUR_FINGERS', 'PLAIN_LEFT_FOUR_FINGERS', 'PLAIN_THUMBS_TOGETHER', 'RIGHT_EXTRA_DIGIT', 'LEFT_EXTRA_DIGIT', 'UNKNOWN_FRICTION_RIDGE', 'EJI_OR_TIP', 'UNKNOWN_PALM', 'RIGHT_FULL_PALM', 'RIGHT_WRITERS_PALM', 'LEFT_FULL_PALM', 'LEFT_WRITERS_PALM', 'RIGHT_LOWER_PALM', 'RIGHT_UPPER_PALM', 'LEFT_LOWER_PALM', 'LEFT_UPPER_PALM', 'RIGHT_OTHER', 'LEFT_OTHER', 'RIGHT_INTERDIGITAL', 'RIGHT_THENAR', 'RIGHT_HYPOTHENAR', 'LEFT_INTERDIGITAL', 'LEFT_THENAR', 'LEFT_HYPOTHENAR', 'RIGHT_GRASP', 'LEFT_GRASP', 'LATENT_PRINT', 'RIGHT_CARPAL_DELTA_AREA', 'LEFT_CARPAL_DELTA_AREA', 'RIGHT_FULL_PALM_AND_WRITERS_PALM', 'LEFT_FULL_PALM_AND_WRITERS_PALM', 'RIGHT_WRIST_BRACELET', 'LEFT_WRIST_BRACELET'):
            raise ValueError("must be one of enum values ('UNKNOWN_FINGER', 'RIGHT_THUMB', 'RIGHT_INDEX', 'RIGHT_MIDDLE', 'RIGHT_RING', 'RIGHT_LITTLE', 'LEFT_THUMB', 'LEFT_INDEX', 'LEFT_MIDDLE', 'LEFT_RING', 'LEFT_LITTLE', 'PLAIN_RIGHT_THUMB', 'PLAIN_LEFT_THUMB', 'PLAIN_RIGHT_FOUR_FINGERS', 'PLAIN_LEFT_FOUR_FINGERS', 'PLAIN_THUMBS_TOGETHER', 'RIGHT_EXTRA_DIGIT', 'LEFT_EXTRA_DIGIT', 'UNKNOWN_FRICTION_RIDGE', 'EJI_OR_TIP', 'UNKNOWN_PALM', 'RIGHT_FULL_PALM', 'RIGHT_WRITERS_PALM', 'LEFT_FULL_PALM', 'LEFT_WRITERS_PALM', 'RIGHT_LOWER_PALM', 'RIGHT_UPPER_PALM', 'LEFT_LOWER_PALM', 'LEFT_UPPER_PALM', 'RIGHT_OTHER', 'LEFT_OTHER', 'RIGHT_INTERDIGITAL', 'RIGHT_THENAR', 'RIGHT_HYPOTHENAR', 'LEFT_INTERDIGITAL', 'LEFT_THENAR', 'LEFT_HYPOTHENAR', 'RIGHT_GRASP', 'LEFT_GRASP', 'LATENT_PRINT', 'RIGHT_CARPAL_DELTA_AREA', 'LEFT_CARPAL_DELTA_AREA', 'RIGHT_FULL_PALM_AND_WRITERS_PALM', 'LEFT_FULL_PALM_AND_WRITERS_PALM', 'RIGHT_WRIST_BRACELET', 'LEFT_WRIST_BRACELET')")
        return value

    @field_validator('probe_latent_position')
    def probe_latent_position_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('UNKNOWN_FINGER', 'RIGHT_THUMB', 'RIGHT_INDEX', 'RIGHT_MIDDLE', 'RIGHT_RING', 'RIGHT_LITTLE', 'LEFT_THUMB', 'LEFT_INDEX', 'LEFT_MIDDLE', 'LEFT_RING', 'LEFT_LITTLE', 'PLAIN_RIGHT_THUMB', 'PLAIN_LEFT_THUMB', 'PLAIN_RIGHT_FOUR_FINGERS', 'PLAIN_LEFT_FOUR_FINGERS', 'PLAIN_THUMBS_TOGETHER', 'RIGHT_EXTRA_DIGIT', 'LEFT_EXTRA_DIGIT', 'UNKNOWN_FRICTION_RIDGE', 'EJI_OR_TIP', 'UNKNOWN_PALM', 'RIGHT_FULL_PALM', 'RIGHT_WRITERS_PALM', 'LEFT_FULL_PALM', 'LEFT_WRITERS_PALM', 'RIGHT_LOWER_PALM', 'RIGHT_UPPER_PALM', 'LEFT_LOWER_PALM', 'LEFT_UPPER_PALM', 'RIGHT_OTHER', 'LEFT_OTHER', 'RIGHT_INTERDIGITAL', 'RIGHT_THENAR', 'RIGHT_HYPOTHENAR', 'LEFT_INTERDIGITAL', 'LEFT_THENAR', 'LEFT_HYPOTHENAR', 'RIGHT_GRASP', 'LEFT_GRASP', 'LATENT_PRINT', 'RIGHT_CARPAL_DELTA_AREA', 'LEFT_CARPAL_DELTA_AREA', 'RIGHT_FULL_PALM_AND_WRITERS_PALM', 'LEFT_FULL_PALM_AND_WRITERS_PALM', 'RIGHT_WRIST_BRACELET', 'LEFT_WRIST_BRACELET'):
            raise ValueError("must be one of enum values ('UNKNOWN_FINGER', 'RIGHT_THUMB', 'RIGHT_INDEX', 'RIGHT_MIDDLE', 'RIGHT_RING', 'RIGHT_LITTLE', 'LEFT_THUMB', 'LEFT_INDEX', 'LEFT_MIDDLE', 'LEFT_RING', 'LEFT_LITTLE', 'PLAIN_RIGHT_THUMB', 'PLAIN_LEFT_THUMB', 'PLAIN_RIGHT_FOUR_FINGERS', 'PLAIN_LEFT_FOUR_FINGERS', 'PLAIN_THUMBS_TOGETHER', 'RIGHT_EXTRA_DIGIT', 'LEFT_EXTRA_DIGIT', 'UNKNOWN_FRICTION_RIDGE', 'EJI_OR_TIP', 'UNKNOWN_PALM', 'RIGHT_FULL_PALM', 'RIGHT_WRITERS_PALM', 'LEFT_FULL_PALM', 'LEFT_WRITERS_PALM', 'RIGHT_LOWER_PALM', 'RIGHT_UPPER_PALM', 'LEFT_LOWER_PALM', 'LEFT_UPPER_PALM', 'RIGHT_OTHER', 'LEFT_OTHER', 'RIGHT_INTERDIGITAL', 'RIGHT_THENAR', 'RIGHT_HYPOTHENAR', 'LEFT_INTERDIGITAL', 'LEFT_THENAR', 'LEFT_HYPOTHENAR', 'RIGHT_GRASP', 'LEFT_GRASP', 'LATENT_PRINT', 'RIGHT_CARPAL_DELTA_AREA', 'LEFT_CARPAL_DELTA_AREA', 'RIGHT_FULL_PALM_AND_WRITERS_PALM', 'LEFT_FULL_PALM_AND_WRITERS_PALM', 'RIGHT_WRIST_BRACELET', 'LEFT_WRIST_BRACELET')")
        return value

    @field_validator('probe_palmprint_position')
    def probe_palmprint_position_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('UNKNOWN_FINGER', 'RIGHT_THUMB', 'RIGHT_INDEX', 'RIGHT_MIDDLE', 'RIGHT_RING', 'RIGHT_LITTLE', 'LEFT_THUMB', 'LEFT_INDEX', 'LEFT_MIDDLE', 'LEFT_RING', 'LEFT_LITTLE', 'PLAIN_RIGHT_THUMB', 'PLAIN_LEFT_THUMB', 'PLAIN_RIGHT_FOUR_FINGERS', 'PLAIN_LEFT_FOUR_FINGERS', 'PLAIN_THUMBS_TOGETHER', 'RIGHT_EXTRA_DIGIT', 'LEFT_EXTRA_DIGIT', 'UNKNOWN_FRICTION_RIDGE', 'EJI_OR_TIP', 'UNKNOWN_PALM', 'RIGHT_FULL_PALM', 'RIGHT_WRITERS_PALM', 'LEFT_FULL_PALM', 'LEFT_WRITERS_PALM', 'RIGHT_LOWER_PALM', 'RIGHT_UPPER_PALM', 'LEFT_LOWER_PALM', 'LEFT_UPPER_PALM', 'RIGHT_OTHER', 'LEFT_OTHER', 'RIGHT_INTERDIGITAL', 'RIGHT_THENAR', 'RIGHT_HYPOTHENAR', 'LEFT_INTERDIGITAL', 'LEFT_THENAR', 'LEFT_HYPOTHENAR', 'RIGHT_GRASP', 'LEFT_GRASP', 'LATENT_PRINT', 'RIGHT_CARPAL_DELTA_AREA', 'LEFT_CARPAL_DELTA_AREA', 'RIGHT_FULL_PALM_AND_WRITERS_PALM', 'LEFT_FULL_PALM_AND_WRITERS_PALM', 'RIGHT_WRIST_BRACELET', 'LEFT_WRIST_BRACELET'):
            raise ValueError("must be one of enum values ('UNKNOWN_FINGER', 'RIGHT_THUMB', 'RIGHT_INDEX', 'RIGHT_MIDDLE', 'RIGHT_RING', 'RIGHT_LITTLE', 'LEFT_THUMB', 'LEFT_INDEX', 'LEFT_MIDDLE', 'LEFT_RING', 'LEFT_LITTLE', 'PLAIN_RIGHT_THUMB', 'PLAIN_LEFT_THUMB', 'PLAIN_RIGHT_FOUR_FINGERS', 'PLAIN_LEFT_FOUR_FINGERS', 'PLAIN_THUMBS_TOGETHER', 'RIGHT_EXTRA_DIGIT', 'LEFT_EXTRA_DIGIT', 'UNKNOWN_FRICTION_RIDGE', 'EJI_OR_TIP', 'UNKNOWN_PALM', 'RIGHT_FULL_PALM', 'RIGHT_WRITERS_PALM', 'LEFT_FULL_PALM', 'LEFT_WRITERS_PALM', 'RIGHT_LOWER_PALM', 'RIGHT_UPPER_PALM', 'LEFT_LOWER_PALM', 'LEFT_UPPER_PALM', 'RIGHT_OTHER', 'LEFT_OTHER', 'RIGHT_INTERDIGITAL', 'RIGHT_THENAR', 'RIGHT_HYPOTHENAR', 'LEFT_INTERDIGITAL', 'LEFT_THENAR', 'LEFT_HYPOTHENAR', 'RIGHT_GRASP', 'LEFT_GRASP', 'LATENT_PRINT', 'RIGHT_CARPAL_DELTA_AREA', 'LEFT_CARPAL_DELTA_AREA', 'RIGHT_FULL_PALM_AND_WRITERS_PALM', 'LEFT_FULL_PALM_AND_WRITERS_PALM', 'RIGHT_WRIST_BRACELET', 'LEFT_WRIST_BRACELET')")
        return value

    @field_validator('reference_fingerprint_position')
    def reference_fingerprint_position_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('UNKNOWN_FINGER', 'RIGHT_THUMB', 'RIGHT_INDEX', 'RIGHT_MIDDLE', 'RIGHT_RING', 'RIGHT_LITTLE', 'LEFT_THUMB', 'LEFT_INDEX', 'LEFT_MIDDLE', 'LEFT_RING', 'LEFT_LITTLE', 'PLAIN_RIGHT_THUMB', 'PLAIN_LEFT_THUMB', 'PLAIN_RIGHT_FOUR_FINGERS', 'PLAIN_LEFT_FOUR_FINGERS', 'PLAIN_THUMBS_TOGETHER', 'RIGHT_EXTRA_DIGIT', 'LEFT_EXTRA_DIGIT', 'UNKNOWN_FRICTION_RIDGE', 'EJI_OR_TIP', 'UNKNOWN_PALM', 'RIGHT_FULL_PALM', 'RIGHT_WRITERS_PALM', 'LEFT_FULL_PALM', 'LEFT_WRITERS_PALM', 'RIGHT_LOWER_PALM', 'RIGHT_UPPER_PALM', 'LEFT_LOWER_PALM', 'LEFT_UPPER_PALM', 'RIGHT_OTHER', 'LEFT_OTHER', 'RIGHT_INTERDIGITAL', 'RIGHT_THENAR', 'RIGHT_HYPOTHENAR', 'LEFT_INTERDIGITAL', 'LEFT_THENAR', 'LEFT_HYPOTHENAR', 'RIGHT_GRASP', 'LEFT_GRASP', 'LATENT_PRINT', 'RIGHT_CARPAL_DELTA_AREA', 'LEFT_CARPAL_DELTA_AREA', 'RIGHT_FULL_PALM_AND_WRITERS_PALM', 'LEFT_FULL_PALM_AND_WRITERS_PALM', 'RIGHT_WRIST_BRACELET', 'LEFT_WRIST_BRACELET'):
            raise ValueError("must be one of enum values ('UNKNOWN_FINGER', 'RIGHT_THUMB', 'RIGHT_INDEX', 'RIGHT_MIDDLE', 'RIGHT_RING', 'RIGHT_LITTLE', 'LEFT_THUMB', 'LEFT_INDEX', 'LEFT_MIDDLE', 'LEFT_RING', 'LEFT_LITTLE', 'PLAIN_RIGHT_THUMB', 'PLAIN_LEFT_THUMB', 'PLAIN_RIGHT_FOUR_FINGERS', 'PLAIN_LEFT_FOUR_FINGERS', 'PLAIN_THUMBS_TOGETHER', 'RIGHT_EXTRA_DIGIT', 'LEFT_EXTRA_DIGIT', 'UNKNOWN_FRICTION_RIDGE', 'EJI_OR_TIP', 'UNKNOWN_PALM', 'RIGHT_FULL_PALM', 'RIGHT_WRITERS_PALM', 'LEFT_FULL_PALM', 'LEFT_WRITERS_PALM', 'RIGHT_LOWER_PALM', 'RIGHT_UPPER_PALM', 'LEFT_LOWER_PALM', 'LEFT_UPPER_PALM', 'RIGHT_OTHER', 'LEFT_OTHER', 'RIGHT_INTERDIGITAL', 'RIGHT_THENAR', 'RIGHT_HYPOTHENAR', 'LEFT_INTERDIGITAL', 'LEFT_THENAR', 'LEFT_HYPOTHENAR', 'RIGHT_GRASP', 'LEFT_GRASP', 'LATENT_PRINT', 'RIGHT_CARPAL_DELTA_AREA', 'LEFT_CARPAL_DELTA_AREA', 'RIGHT_FULL_PALM_AND_WRITERS_PALM', 'LEFT_FULL_PALM_AND_WRITERS_PALM', 'RIGHT_WRIST_BRACELET', 'LEFT_WRIST_BRACELET')")
        return value

    @field_validator('reference_latent_position')
    def reference_latent_position_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('UNKNOWN_FINGER', 'RIGHT_THUMB', 'RIGHT_INDEX', 'RIGHT_MIDDLE', 'RIGHT_RING', 'RIGHT_LITTLE', 'LEFT_THUMB', 'LEFT_INDEX', 'LEFT_MIDDLE', 'LEFT_RING', 'LEFT_LITTLE', 'PLAIN_RIGHT_THUMB', 'PLAIN_LEFT_THUMB', 'PLAIN_RIGHT_FOUR_FINGERS', 'PLAIN_LEFT_FOUR_FINGERS', 'PLAIN_THUMBS_TOGETHER', 'RIGHT_EXTRA_DIGIT', 'LEFT_EXTRA_DIGIT', 'UNKNOWN_FRICTION_RIDGE', 'EJI_OR_TIP', 'UNKNOWN_PALM', 'RIGHT_FULL_PALM', 'RIGHT_WRITERS_PALM', 'LEFT_FULL_PALM', 'LEFT_WRITERS_PALM', 'RIGHT_LOWER_PALM', 'RIGHT_UPPER_PALM', 'LEFT_LOWER_PALM', 'LEFT_UPPER_PALM', 'RIGHT_OTHER', 'LEFT_OTHER', 'RIGHT_INTERDIGITAL', 'RIGHT_THENAR', 'RIGHT_HYPOTHENAR', 'LEFT_INTERDIGITAL', 'LEFT_THENAR', 'LEFT_HYPOTHENAR', 'RIGHT_GRASP', 'LEFT_GRASP', 'LATENT_PRINT', 'RIGHT_CARPAL_DELTA_AREA', 'LEFT_CARPAL_DELTA_AREA', 'RIGHT_FULL_PALM_AND_WRITERS_PALM', 'LEFT_FULL_PALM_AND_WRITERS_PALM', 'RIGHT_WRIST_BRACELET', 'LEFT_WRIST_BRACELET'):
            raise ValueError("must be one of enum values ('UNKNOWN_FINGER', 'RIGHT_THUMB', 'RIGHT_INDEX', 'RIGHT_MIDDLE', 'RIGHT_RING', 'RIGHT_LITTLE', 'LEFT_THUMB', 'LEFT_INDEX', 'LEFT_MIDDLE', 'LEFT_RING', 'LEFT_LITTLE', 'PLAIN_RIGHT_THUMB', 'PLAIN_LEFT_THUMB', 'PLAIN_RIGHT_FOUR_FINGERS', 'PLAIN_LEFT_FOUR_FINGERS', 'PLAIN_THUMBS_TOGETHER', 'RIGHT_EXTRA_DIGIT', 'LEFT_EXTRA_DIGIT', 'UNKNOWN_FRICTION_RIDGE', 'EJI_OR_TIP', 'UNKNOWN_PALM', 'RIGHT_FULL_PALM', 'RIGHT_WRITERS_PALM', 'LEFT_FULL_PALM', 'LEFT_WRITERS_PALM', 'RIGHT_LOWER_PALM', 'RIGHT_UPPER_PALM', 'LEFT_LOWER_PALM', 'LEFT_UPPER_PALM', 'RIGHT_OTHER', 'LEFT_OTHER', 'RIGHT_INTERDIGITAL', 'RIGHT_THENAR', 'RIGHT_HYPOTHENAR', 'LEFT_INTERDIGITAL', 'LEFT_THENAR', 'LEFT_HYPOTHENAR', 'RIGHT_GRASP', 'LEFT_GRASP', 'LATENT_PRINT', 'RIGHT_CARPAL_DELTA_AREA', 'LEFT_CARPAL_DELTA_AREA', 'RIGHT_FULL_PALM_AND_WRITERS_PALM', 'LEFT_FULL_PALM_AND_WRITERS_PALM', 'RIGHT_WRIST_BRACELET', 'LEFT_WRIST_BRACELET')")
        return value

    @field_validator('reference_palmprint_position')
    def reference_palmprint_position_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('UNKNOWN_FINGER', 'RIGHT_THUMB', 'RIGHT_INDEX', 'RIGHT_MIDDLE', 'RIGHT_RING', 'RIGHT_LITTLE', 'LEFT_THUMB', 'LEFT_INDEX', 'LEFT_MIDDLE', 'LEFT_RING', 'LEFT_LITTLE', 'PLAIN_RIGHT_THUMB', 'PLAIN_LEFT_THUMB', 'PLAIN_RIGHT_FOUR_FINGERS', 'PLAIN_LEFT_FOUR_FINGERS', 'PLAIN_THUMBS_TOGETHER', 'RIGHT_EXTRA_DIGIT', 'LEFT_EXTRA_DIGIT', 'UNKNOWN_FRICTION_RIDGE', 'EJI_OR_TIP', 'UNKNOWN_PALM', 'RIGHT_FULL_PALM', 'RIGHT_WRITERS_PALM', 'LEFT_FULL_PALM', 'LEFT_WRITERS_PALM', 'RIGHT_LOWER_PALM', 'RIGHT_UPPER_PALM', 'LEFT_LOWER_PALM', 'LEFT_UPPER_PALM', 'RIGHT_OTHER', 'LEFT_OTHER', 'RIGHT_INTERDIGITAL', 'RIGHT_THENAR', 'RIGHT_HYPOTHENAR', 'LEFT_INTERDIGITAL', 'LEFT_THENAR', 'LEFT_HYPOTHENAR', 'RIGHT_GRASP', 'LEFT_GRASP', 'LATENT_PRINT', 'RIGHT_CARPAL_DELTA_AREA', 'LEFT_CARPAL_DELTA_AREA', 'RIGHT_FULL_PALM_AND_WRITERS_PALM', 'LEFT_FULL_PALM_AND_WRITERS_PALM', 'RIGHT_WRIST_BRACELET', 'LEFT_WRIST_BRACELET'):
            raise ValueError("must be one of enum values ('UNKNOWN_FINGER', 'RIGHT_THUMB', 'RIGHT_INDEX', 'RIGHT_MIDDLE', 'RIGHT_RING', 'RIGHT_LITTLE', 'LEFT_THUMB', 'LEFT_INDEX', 'LEFT_MIDDLE', 'LEFT_RING', 'LEFT_LITTLE', 'PLAIN_RIGHT_THUMB', 'PLAIN_LEFT_THUMB', 'PLAIN_RIGHT_FOUR_FINGERS', 'PLAIN_LEFT_FOUR_FINGERS', 'PLAIN_THUMBS_TOGETHER', 'RIGHT_EXTRA_DIGIT', 'LEFT_EXTRA_DIGIT', 'UNKNOWN_FRICTION_RIDGE', 'EJI_OR_TIP', 'UNKNOWN_PALM', 'RIGHT_FULL_PALM', 'RIGHT_WRITERS_PALM', 'LEFT_FULL_PALM', 'LEFT_WRITERS_PALM', 'RIGHT_LOWER_PALM', 'RIGHT_UPPER_PALM', 'LEFT_LOWER_PALM', 'LEFT_UPPER_PALM', 'RIGHT_OTHER', 'LEFT_OTHER', 'RIGHT_INTERDIGITAL', 'RIGHT_THENAR', 'RIGHT_HYPOTHENAR', 'LEFT_INTERDIGITAL', 'LEFT_THENAR', 'LEFT_HYPOTHENAR', 'RIGHT_GRASP', 'LEFT_GRASP', 'LATENT_PRINT', 'RIGHT_CARPAL_DELTA_AREA', 'LEFT_CARPAL_DELTA_AREA', 'RIGHT_FULL_PALM_AND_WRITERS_PALM', 'LEFT_FULL_PALM_AND_WRITERS_PALM', 'RIGHT_WRIST_BRACELET', 'LEFT_WRIST_BRACELET')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CandidateLatentPartialScore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CandidateLatentPartialScore from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "probeFingerprintPosition": obj.get("probeFingerprintPosition"),
            "probeLatentPosition": obj.get("probeLatentPosition"),
            "probePalmprintPosition": obj.get("probePalmprintPosition"),
            "referenceFingerprintPosition": obj.get("referenceFingerprintPosition"),
            "referenceLatentPosition": obj.get("referenceLatentPosition"),
            "referencePalmprintPosition": obj.get("referencePalmprintPosition"),
            "score": obj.get("score")
        })
        return _obj


