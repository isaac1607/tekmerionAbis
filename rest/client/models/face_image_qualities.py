# coding: utf-8

"""
    ABIS REST API

    Innovatrics ABIS proprietary REST API

    The version of the OpenAPI document: 6.62.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FaceImageQualities(BaseModel):
    """
    FaceImageQualities
    """ # noqa: E501
    age: Optional[Union[StrictFloat, StrictInt]] = None
    background_uniformity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="backgroundUniformity")
    brightness: Optional[Union[StrictFloat, StrictInt]] = None
    chin_tip_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="chinTipScore")
    chin_tip_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="chinTipX")
    chin_tip_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="chinTipY")
    contrast: Optional[Union[StrictFloat, StrictInt]] = None
    created_at: Optional[datetime] = Field(default=None, description="A date-time format in the ISO-8601 calendar system", alias="createdAt")
    crop: Optional[Union[StrictFloat, StrictInt]] = None
    expression_neutral: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="expressionNeutral")
    eye_distance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="eyeDistance")
    eye_gaze: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="eyeGaze")
    face_confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="faceConfidence")
    face_relative_area: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="faceRelativeArea")
    face_relative_area_in_image: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="faceRelativeAreaInImage")
    face_size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="faceSize")
    face_verification_confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="faceVerificationConfidence")
    gender: Optional[Union[StrictFloat, StrictInt]] = None
    glass_status: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="glassStatus")
    heavy_frame: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="heavyFrame")
    iface_version: Optional[StrictStr] = Field(default=None, alias="ifaceVersion")
    left_edge_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="leftEdgeScore")
    left_edge_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="leftEdgeX")
    left_edge_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="leftEdgeY")
    left_eye_centre_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="leftEyeCentreScore")
    left_eye_centre_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="leftEyeCentreX")
    left_eye_centre_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="leftEyeCentreY")
    left_eye_inner_corner_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="leftEyeInnerCornerScore")
    left_eye_inner_corner_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="leftEyeInnerCornerX")
    left_eye_inner_corner_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="leftEyeInnerCornerY")
    left_eye_outer_corner_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="leftEyeOuterCornerScore")
    left_eye_outer_corner_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="leftEyeOuterCornerX")
    left_eye_outer_corner_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="leftEyeOuterCornerY")
    left_eye_status: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="leftEyeStatus")
    left_eyebrow_inner_end_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="leftEyebrowInnerEndScore")
    left_eyebrow_inner_end_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="leftEyebrowInnerEndX")
    left_eyebrow_inner_end_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="leftEyebrowInnerEndY")
    left_eyebrow_outer_end_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="leftEyebrowOuterEndScore")
    left_eyebrow_outer_end_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="leftEyebrowOuterEndX")
    left_eyebrow_outer_end_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="leftEyebrowOuterEndY")
    left_red_eye: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="leftRedEye")
    mask: Optional[Union[StrictFloat, StrictInt]] = None
    mouth_center_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mouthCenterScore")
    mouth_center_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mouthCenterX")
    mouth_center_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mouthCenterY")
    mouth_left_corner_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mouthLeftCornerScore")
    mouth_left_corner_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mouthLeftCornerX")
    mouth_left_corner_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mouthLeftCornerY")
    mouth_lower_edge_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mouthLowerEdgeScore")
    mouth_lower_edge_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mouthLowerEdgeX")
    mouth_lower_edge_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mouthLowerEdgeY")
    mouth_openness: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mouthOpenness")
    mouth_right_corner_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mouthRightCornerScore")
    mouth_right_corner_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mouthRightCornerX")
    mouth_right_corner_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mouthRightCornerY")
    mouth_status: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mouthStatus")
    mouth_upper_edge_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mouthUpperEdgeScore")
    mouth_upper_edge_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mouthUpperEdgeX")
    mouth_upper_edge_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mouthUpperEdgeY")
    nose_bottom_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="noseBottomScore")
    nose_bottom_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="noseBottomX")
    nose_bottom_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="noseBottomY")
    nose_left_bottom_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="noseLeftBottomScore")
    nose_left_bottom_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="noseLeftBottomX")
    nose_left_bottom_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="noseLeftBottomY")
    nose_right_bottom_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="noseRightBottomScore")
    nose_right_bottom_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="noseRightBottomX")
    nose_right_bottom_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="noseRightBottomY")
    nose_root_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="noseRootScore")
    nose_root_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="noseRootX")
    nose_root_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="noseRootY")
    nose_shadow: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="noseShadow")
    nose_tip_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="noseTipScore")
    nose_tip_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="noseTipX")
    nose_tip_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="noseTipY")
    passive_liveness_distant: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="passiveLivenessDistant")
    passive_liveness_frames: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="passiveLivenessFrames")
    passive_liveness_moire: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="passiveLivenessMoire")
    passive_liveness_nearby: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="passiveLivenessNearby")
    passive_liveness_universal: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="passiveLivenessUniversal")
    pitch: Optional[Union[StrictFloat, StrictInt]] = None
    pitch_angle: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="pitchAngle")
    right_edge_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rightEdgeScore")
    right_edge_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rightEdgeX")
    right_edge_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rightEdgeY")
    right_eye_centre_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rightEyeCentreScore")
    right_eye_centre_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rightEyeCentreX")
    right_eye_centre_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rightEyeCentreY")
    right_eye_inner_corner_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rightEyeInnerCornerScore")
    right_eye_inner_corner_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rightEyeInnerCornerX")
    right_eye_inner_corner_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rightEyeInnerCornerY")
    right_eye_outer_corner_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rightEyeOuterCornerScore")
    right_eye_outer_corner_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rightEyeOuterCornerX")
    right_eye_outer_corner_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rightEyeOuterCornerY")
    right_eye_status: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rightEyeStatus")
    right_eyebrow_inner_end_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rightEyebrowInnerEndScore")
    right_eyebrow_inner_end_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rightEyebrowInnerEndX")
    right_eyebrow_inner_end_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rightEyebrowInnerEndY")
    right_eyebrow_outer_end_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rightEyebrowOuterEndScore")
    right_eyebrow_outer_end_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rightEyebrowOuterEndX")
    right_eyebrow_outer_end_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rightEyebrowOuterEndY")
    right_red_eye: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rightRedEye")
    roll: Optional[Union[StrictFloat, StrictInt]] = None
    roll_angle: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rollAngle")
    segmentation_mask: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="segmentationMask")
    shadow: Optional[Union[StrictFloat, StrictInt]] = None
    sharpness: Optional[Union[StrictFloat, StrictInt]] = None
    specularity: Optional[Union[StrictFloat, StrictInt]] = None
    template: Optional[Union[StrictFloat, StrictInt]] = None
    tinted_glasses: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="tintedGlasses")
    unique_intensity_levels: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="uniqueIntensityLevels")
    updated_at: Optional[datetime] = Field(default=None, description="A date-time format in the ISO-8601 calendar system", alias="updatedAt")
    valid: Optional[StrictBool] = None
    yaw: Optional[Union[StrictFloat, StrictInt]] = None
    yaw_angle: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="yawAngle")
    __properties: ClassVar[List[str]] = ["age", "backgroundUniformity", "brightness", "chinTipScore", "chinTipX", "chinTipY", "contrast", "createdAt", "crop", "expressionNeutral", "eyeDistance", "eyeGaze", "faceConfidence", "faceRelativeArea", "faceRelativeAreaInImage", "faceSize", "faceVerificationConfidence", "gender", "glassStatus", "heavyFrame", "ifaceVersion", "leftEdgeScore", "leftEdgeX", "leftEdgeY", "leftEyeCentreScore", "leftEyeCentreX", "leftEyeCentreY", "leftEyeInnerCornerScore", "leftEyeInnerCornerX", "leftEyeInnerCornerY", "leftEyeOuterCornerScore", "leftEyeOuterCornerX", "leftEyeOuterCornerY", "leftEyeStatus", "leftEyebrowInnerEndScore", "leftEyebrowInnerEndX", "leftEyebrowInnerEndY", "leftEyebrowOuterEndScore", "leftEyebrowOuterEndX", "leftEyebrowOuterEndY", "leftRedEye", "mask", "mouthCenterScore", "mouthCenterX", "mouthCenterY", "mouthLeftCornerScore", "mouthLeftCornerX", "mouthLeftCornerY", "mouthLowerEdgeScore", "mouthLowerEdgeX", "mouthLowerEdgeY", "mouthOpenness", "mouthRightCornerScore", "mouthRightCornerX", "mouthRightCornerY", "mouthStatus", "mouthUpperEdgeScore", "mouthUpperEdgeX", "mouthUpperEdgeY", "noseBottomScore", "noseBottomX", "noseBottomY", "noseLeftBottomScore", "noseLeftBottomX", "noseLeftBottomY", "noseRightBottomScore", "noseRightBottomX", "noseRightBottomY", "noseRootScore", "noseRootX", "noseRootY", "noseShadow", "noseTipScore", "noseTipX", "noseTipY", "passiveLivenessDistant", "passiveLivenessFrames", "passiveLivenessMoire", "passiveLivenessNearby", "passiveLivenessUniversal", "pitch", "pitchAngle", "rightEdgeScore", "rightEdgeX", "rightEdgeY", "rightEyeCentreScore", "rightEyeCentreX", "rightEyeCentreY", "rightEyeInnerCornerScore", "rightEyeInnerCornerX", "rightEyeInnerCornerY", "rightEyeOuterCornerScore", "rightEyeOuterCornerX", "rightEyeOuterCornerY", "rightEyeStatus", "rightEyebrowInnerEndScore", "rightEyebrowInnerEndX", "rightEyebrowInnerEndY", "rightEyebrowOuterEndScore", "rightEyebrowOuterEndX", "rightEyebrowOuterEndY", "rightRedEye", "roll", "rollAngle", "segmentationMask", "shadow", "sharpness", "specularity", "template", "tintedGlasses", "uniqueIntensityLevels", "updatedAt", "valid", "yaw", "yawAngle"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FaceImageQualities from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "age",
                "background_uniformity",
                "brightness",
                "chin_tip_score",
                "chin_tip_x",
                "chin_tip_y",
                "contrast",
                "created_at",
                "crop",
                "expression_neutral",
                "eye_distance",
                "eye_gaze",
                "face_confidence",
                "face_relative_area",
                "face_relative_area_in_image",
                "face_size",
                "face_verification_confidence",
                "gender",
                "glass_status",
                "heavy_frame",
                "iface_version",
                "left_edge_score",
                "left_edge_x",
                "left_edge_y",
                "left_eye_centre_score",
                "left_eye_centre_x",
                "left_eye_centre_y",
                "left_eye_inner_corner_score",
                "left_eye_inner_corner_x",
                "left_eye_inner_corner_y",
                "left_eye_outer_corner_score",
                "left_eye_outer_corner_x",
                "left_eye_outer_corner_y",
                "left_eye_status",
                "left_eyebrow_inner_end_score",
                "left_eyebrow_inner_end_x",
                "left_eyebrow_inner_end_y",
                "left_eyebrow_outer_end_score",
                "left_eyebrow_outer_end_x",
                "left_eyebrow_outer_end_y",
                "left_red_eye",
                "mask",
                "mouth_center_score",
                "mouth_center_x",
                "mouth_center_y",
                "mouth_left_corner_score",
                "mouth_left_corner_x",
                "mouth_left_corner_y",
                "mouth_lower_edge_score",
                "mouth_lower_edge_x",
                "mouth_lower_edge_y",
                "mouth_openness",
                "mouth_right_corner_score",
                "mouth_right_corner_x",
                "mouth_right_corner_y",
                "mouth_status",
                "mouth_upper_edge_score",
                "mouth_upper_edge_x",
                "mouth_upper_edge_y",
                "nose_bottom_score",
                "nose_bottom_x",
                "nose_bottom_y",
                "nose_left_bottom_score",
                "nose_left_bottom_x",
                "nose_left_bottom_y",
                "nose_right_bottom_score",
                "nose_right_bottom_x",
                "nose_right_bottom_y",
                "nose_root_score",
                "nose_root_x",
                "nose_root_y",
                "nose_shadow",
                "nose_tip_score",
                "nose_tip_x",
                "nose_tip_y",
                "passive_liveness_distant",
                "passive_liveness_frames",
                "passive_liveness_moire",
                "passive_liveness_nearby",
                "passive_liveness_universal",
                "pitch",
                "pitch_angle",
                "right_edge_score",
                "right_edge_x",
                "right_edge_y",
                "right_eye_centre_score",
                "right_eye_centre_x",
                "right_eye_centre_y",
                "right_eye_inner_corner_score",
                "right_eye_inner_corner_x",
                "right_eye_inner_corner_y",
                "right_eye_outer_corner_score",
                "right_eye_outer_corner_x",
                "right_eye_outer_corner_y",
                "right_eye_status",
                "right_eyebrow_inner_end_score",
                "right_eyebrow_inner_end_x",
                "right_eyebrow_inner_end_y",
                "right_eyebrow_outer_end_score",
                "right_eyebrow_outer_end_x",
                "right_eyebrow_outer_end_y",
                "right_red_eye",
                "roll",
                "roll_angle",
                "segmentation_mask",
                "shadow",
                "sharpness",
                "specularity",
                "template",
                "tinted_glasses",
                "unique_intensity_levels",
                "updated_at",
                "valid",
                "yaw",
                "yaw_angle",
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FaceImageQualities from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "age": obj.get("age"),
            "backgroundUniformity": obj.get("backgroundUniformity"),
            "brightness": obj.get("brightness"),
            "chinTipScore": obj.get("chinTipScore"),
            "chinTipX": obj.get("chinTipX"),
            "chinTipY": obj.get("chinTipY"),
            "contrast": obj.get("contrast"),
            "createdAt": obj.get("createdAt"),
            "crop": obj.get("crop"),
            "expressionNeutral": obj.get("expressionNeutral"),
            "eyeDistance": obj.get("eyeDistance"),
            "eyeGaze": obj.get("eyeGaze"),
            "faceConfidence": obj.get("faceConfidence"),
            "faceRelativeArea": obj.get("faceRelativeArea"),
            "faceRelativeAreaInImage": obj.get("faceRelativeAreaInImage"),
            "faceSize": obj.get("faceSize"),
            "faceVerificationConfidence": obj.get("faceVerificationConfidence"),
            "gender": obj.get("gender"),
            "glassStatus": obj.get("glassStatus"),
            "heavyFrame": obj.get("heavyFrame"),
            "ifaceVersion": obj.get("ifaceVersion"),
            "leftEdgeScore": obj.get("leftEdgeScore"),
            "leftEdgeX": obj.get("leftEdgeX"),
            "leftEdgeY": obj.get("leftEdgeY"),
            "leftEyeCentreScore": obj.get("leftEyeCentreScore"),
            "leftEyeCentreX": obj.get("leftEyeCentreX"),
            "leftEyeCentreY": obj.get("leftEyeCentreY"),
            "leftEyeInnerCornerScore": obj.get("leftEyeInnerCornerScore"),
            "leftEyeInnerCornerX": obj.get("leftEyeInnerCornerX"),
            "leftEyeInnerCornerY": obj.get("leftEyeInnerCornerY"),
            "leftEyeOuterCornerScore": obj.get("leftEyeOuterCornerScore"),
            "leftEyeOuterCornerX": obj.get("leftEyeOuterCornerX"),
            "leftEyeOuterCornerY": obj.get("leftEyeOuterCornerY"),
            "leftEyeStatus": obj.get("leftEyeStatus"),
            "leftEyebrowInnerEndScore": obj.get("leftEyebrowInnerEndScore"),
            "leftEyebrowInnerEndX": obj.get("leftEyebrowInnerEndX"),
            "leftEyebrowInnerEndY": obj.get("leftEyebrowInnerEndY"),
            "leftEyebrowOuterEndScore": obj.get("leftEyebrowOuterEndScore"),
            "leftEyebrowOuterEndX": obj.get("leftEyebrowOuterEndX"),
            "leftEyebrowOuterEndY": obj.get("leftEyebrowOuterEndY"),
            "leftRedEye": obj.get("leftRedEye"),
            "mask": obj.get("mask"),
            "mouthCenterScore": obj.get("mouthCenterScore"),
            "mouthCenterX": obj.get("mouthCenterX"),
            "mouthCenterY": obj.get("mouthCenterY"),
            "mouthLeftCornerScore": obj.get("mouthLeftCornerScore"),
            "mouthLeftCornerX": obj.get("mouthLeftCornerX"),
            "mouthLeftCornerY": obj.get("mouthLeftCornerY"),
            "mouthLowerEdgeScore": obj.get("mouthLowerEdgeScore"),
            "mouthLowerEdgeX": obj.get("mouthLowerEdgeX"),
            "mouthLowerEdgeY": obj.get("mouthLowerEdgeY"),
            "mouthOpenness": obj.get("mouthOpenness"),
            "mouthRightCornerScore": obj.get("mouthRightCornerScore"),
            "mouthRightCornerX": obj.get("mouthRightCornerX"),
            "mouthRightCornerY": obj.get("mouthRightCornerY"),
            "mouthStatus": obj.get("mouthStatus"),
            "mouthUpperEdgeScore": obj.get("mouthUpperEdgeScore"),
            "mouthUpperEdgeX": obj.get("mouthUpperEdgeX"),
            "mouthUpperEdgeY": obj.get("mouthUpperEdgeY"),
            "noseBottomScore": obj.get("noseBottomScore"),
            "noseBottomX": obj.get("noseBottomX"),
            "noseBottomY": obj.get("noseBottomY"),
            "noseLeftBottomScore": obj.get("noseLeftBottomScore"),
            "noseLeftBottomX": obj.get("noseLeftBottomX"),
            "noseLeftBottomY": obj.get("noseLeftBottomY"),
            "noseRightBottomScore": obj.get("noseRightBottomScore"),
            "noseRightBottomX": obj.get("noseRightBottomX"),
            "noseRightBottomY": obj.get("noseRightBottomY"),
            "noseRootScore": obj.get("noseRootScore"),
            "noseRootX": obj.get("noseRootX"),
            "noseRootY": obj.get("noseRootY"),
            "noseShadow": obj.get("noseShadow"),
            "noseTipScore": obj.get("noseTipScore"),
            "noseTipX": obj.get("noseTipX"),
            "noseTipY": obj.get("noseTipY"),
            "passiveLivenessDistant": obj.get("passiveLivenessDistant"),
            "passiveLivenessFrames": obj.get("passiveLivenessFrames"),
            "passiveLivenessMoire": obj.get("passiveLivenessMoire"),
            "passiveLivenessNearby": obj.get("passiveLivenessNearby"),
            "passiveLivenessUniversal": obj.get("passiveLivenessUniversal"),
            "pitch": obj.get("pitch"),
            "pitchAngle": obj.get("pitchAngle"),
            "rightEdgeScore": obj.get("rightEdgeScore"),
            "rightEdgeX": obj.get("rightEdgeX"),
            "rightEdgeY": obj.get("rightEdgeY"),
            "rightEyeCentreScore": obj.get("rightEyeCentreScore"),
            "rightEyeCentreX": obj.get("rightEyeCentreX"),
            "rightEyeCentreY": obj.get("rightEyeCentreY"),
            "rightEyeInnerCornerScore": obj.get("rightEyeInnerCornerScore"),
            "rightEyeInnerCornerX": obj.get("rightEyeInnerCornerX"),
            "rightEyeInnerCornerY": obj.get("rightEyeInnerCornerY"),
            "rightEyeOuterCornerScore": obj.get("rightEyeOuterCornerScore"),
            "rightEyeOuterCornerX": obj.get("rightEyeOuterCornerX"),
            "rightEyeOuterCornerY": obj.get("rightEyeOuterCornerY"),
            "rightEyeStatus": obj.get("rightEyeStatus"),
            "rightEyebrowInnerEndScore": obj.get("rightEyebrowInnerEndScore"),
            "rightEyebrowInnerEndX": obj.get("rightEyebrowInnerEndX"),
            "rightEyebrowInnerEndY": obj.get("rightEyebrowInnerEndY"),
            "rightEyebrowOuterEndScore": obj.get("rightEyebrowOuterEndScore"),
            "rightEyebrowOuterEndX": obj.get("rightEyebrowOuterEndX"),
            "rightEyebrowOuterEndY": obj.get("rightEyebrowOuterEndY"),
            "rightRedEye": obj.get("rightRedEye"),
            "roll": obj.get("roll"),
            "rollAngle": obj.get("rollAngle"),
            "segmentationMask": obj.get("segmentationMask"),
            "shadow": obj.get("shadow"),
            "sharpness": obj.get("sharpness"),
            "specularity": obj.get("specularity"),
            "template": obj.get("template"),
            "tintedGlasses": obj.get("tintedGlasses"),
            "uniqueIntensityLevels": obj.get("uniqueIntensityLevels"),
            "updatedAt": obj.get("updatedAt"),
            "valid": obj.get("valid"),
            "yaw": obj.get("yaw"),
            "yawAngle": obj.get("yawAngle")
        })
        return _obj


