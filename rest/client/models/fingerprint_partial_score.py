# coding: utf-8

"""
    ABIS REST API

    Innovatrics ABIS proprietary REST API

    The version of the OpenAPI document: 6.62.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FingerprintPartialScore(BaseModel):
    """
    FingerprintPartialScore
    """ # noqa: E501
    probe_index: Optional[StrictInt] = Field(default=None, alias="probeIndex")
    probe_position: Optional[StrictStr] = Field(default=None, description="Enumeration of fingerprint positions. This includes also palm and latent positions.", alias="probePosition")
    reference_index: Optional[StrictInt] = Field(default=None, alias="referenceIndex")
    reference_position: Optional[StrictStr] = Field(default=None, description="Enumeration of fingerprint positions. This includes also palm and latent positions.", alias="referencePosition")
    score: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["probeIndex", "probePosition", "referenceIndex", "referencePosition", "score"]

    @field_validator('probe_position')
    def probe_position_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('UnknownFinger', 'RightThumb', 'RightIndex', 'RightMiddle', 'RightRing', 'RightLittle', 'LeftThumb', 'LeftIndex', 'LeftMiddle', 'LeftRing', 'LeftLittle', 'PlainRightThumb', 'PlainLeftThumb', 'PlainRightFourFingers', 'PlainLeftFourFingers', 'PlainThumbsTogether', 'RightExtraDigit', 'LeftExtraDigit', 'UnknownFrictionRidge', 'EjiOrTip', 'UnknownPalm', 'RightFullPalm', 'RightWritersPalm', 'LeftFullPalm', 'LeftWritersPalm', 'RightLowerPalm', 'RightUpperPalm', 'LeftLowerPalm', 'LeftUpperPalm', 'RightOther', 'LeftOther', 'RightInterdigital', 'RightThenar', 'RightHypothenar', 'LeftInterdigital', 'LeftThenar', 'LeftHypothenar', 'RightGrasp', 'LeftGrasp', 'LatentPrint', 'RightCarpalDeltaArea', 'LeftCarpalDeltaArea', 'RightFullPalmAndWritersPalm', 'LeftFullPalmAndWritersPalm', 'RightWristBracelet', 'LeftWristBracelet'):
            raise ValueError("must be one of enum values ('UnknownFinger', 'RightThumb', 'RightIndex', 'RightMiddle', 'RightRing', 'RightLittle', 'LeftThumb', 'LeftIndex', 'LeftMiddle', 'LeftRing', 'LeftLittle', 'PlainRightThumb', 'PlainLeftThumb', 'PlainRightFourFingers', 'PlainLeftFourFingers', 'PlainThumbsTogether', 'RightExtraDigit', 'LeftExtraDigit', 'UnknownFrictionRidge', 'EjiOrTip', 'UnknownPalm', 'RightFullPalm', 'RightWritersPalm', 'LeftFullPalm', 'LeftWritersPalm', 'RightLowerPalm', 'RightUpperPalm', 'LeftLowerPalm', 'LeftUpperPalm', 'RightOther', 'LeftOther', 'RightInterdigital', 'RightThenar', 'RightHypothenar', 'LeftInterdigital', 'LeftThenar', 'LeftHypothenar', 'RightGrasp', 'LeftGrasp', 'LatentPrint', 'RightCarpalDeltaArea', 'LeftCarpalDeltaArea', 'RightFullPalmAndWritersPalm', 'LeftFullPalmAndWritersPalm', 'RightWristBracelet', 'LeftWristBracelet')")
        return value

    @field_validator('reference_position')
    def reference_position_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('UnknownFinger', 'RightThumb', 'RightIndex', 'RightMiddle', 'RightRing', 'RightLittle', 'LeftThumb', 'LeftIndex', 'LeftMiddle', 'LeftRing', 'LeftLittle', 'PlainRightThumb', 'PlainLeftThumb', 'PlainRightFourFingers', 'PlainLeftFourFingers', 'PlainThumbsTogether', 'RightExtraDigit', 'LeftExtraDigit', 'UnknownFrictionRidge', 'EjiOrTip', 'UnknownPalm', 'RightFullPalm', 'RightWritersPalm', 'LeftFullPalm', 'LeftWritersPalm', 'RightLowerPalm', 'RightUpperPalm', 'LeftLowerPalm', 'LeftUpperPalm', 'RightOther', 'LeftOther', 'RightInterdigital', 'RightThenar', 'RightHypothenar', 'LeftInterdigital', 'LeftThenar', 'LeftHypothenar', 'RightGrasp', 'LeftGrasp', 'LatentPrint', 'RightCarpalDeltaArea', 'LeftCarpalDeltaArea', 'RightFullPalmAndWritersPalm', 'LeftFullPalmAndWritersPalm', 'RightWristBracelet', 'LeftWristBracelet'):
            raise ValueError("must be one of enum values ('UnknownFinger', 'RightThumb', 'RightIndex', 'RightMiddle', 'RightRing', 'RightLittle', 'LeftThumb', 'LeftIndex', 'LeftMiddle', 'LeftRing', 'LeftLittle', 'PlainRightThumb', 'PlainLeftThumb', 'PlainRightFourFingers', 'PlainLeftFourFingers', 'PlainThumbsTogether', 'RightExtraDigit', 'LeftExtraDigit', 'UnknownFrictionRidge', 'EjiOrTip', 'UnknownPalm', 'RightFullPalm', 'RightWritersPalm', 'LeftFullPalm', 'LeftWritersPalm', 'RightLowerPalm', 'RightUpperPalm', 'LeftLowerPalm', 'LeftUpperPalm', 'RightOther', 'LeftOther', 'RightInterdigital', 'RightThenar', 'RightHypothenar', 'LeftInterdigital', 'LeftThenar', 'LeftHypothenar', 'RightGrasp', 'LeftGrasp', 'LatentPrint', 'RightCarpalDeltaArea', 'LeftCarpalDeltaArea', 'RightFullPalmAndWritersPalm', 'LeftFullPalmAndWritersPalm', 'RightWristBracelet', 'LeftWristBracelet')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FingerprintPartialScore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FingerprintPartialScore from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "probeIndex": obj.get("probeIndex"),
            "probePosition": obj.get("probePosition"),
            "referenceIndex": obj.get("referenceIndex"),
            "referencePosition": obj.get("referencePosition"),
            "score": obj.get("score")
        })
        return _obj


