# coding: utf-8

"""
    ABIS REST API

    Innovatrics ABIS proprietary REST API

    The version of the OpenAPI document: 6.62.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
from abis.rest.client.models.document_page import DocumentPage
from abis.rest.client.models.trust_factor import TrustFactor

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Document(BaseModel):
    """
    Document
    """ # noqa: E501
    can: Optional[StrictStr] = None
    conditions: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    date_and_place_of_issue: Optional[StrictStr] = Field(default=None, alias="dateAndPlaceOfIssue")
    date_of_expiry: Optional[datetime] = Field(default=None, alias="dateOfExpiry")
    date_of_expiry_national_language: Optional[StrictStr] = Field(default=None, alias="dateOfExpiryNationalLanguage")
    date_of_expiry_text: Optional[StrictStr] = Field(default=None, alias="dateOfExpiryText")
    date_of_first_registration: Optional[datetime] = Field(default=None, alias="dateOfFirstRegistration")
    date_of_first_registration_text: Optional[StrictStr] = Field(default=None, alias="dateOfFirstRegistrationText")
    date_of_issue: Optional[datetime] = Field(default=None, alias="dateOfIssue")
    date_of_issue_national_language: Optional[StrictStr] = Field(default=None, alias="dateOfIssueNationalLanguage")
    date_of_issue_text: Optional[StrictStr] = Field(default=None, alias="dateOfIssueText")
    document_pages: Optional[List[DocumentPage]] = Field(default=None, alias="documentPages")
    driving_categories: Optional[StrictStr] = Field(default=None, alias="drivingCategories")
    driving_categories_national_language: Optional[StrictStr] = Field(default=None, alias="drivingCategoriesNationalLanguage")
    driving_licence_version: Optional[StrictStr] = Field(default=None, alias="drivingLicenceVersion")
    edition: Optional[StrictStr] = None
    endorsements: Optional[StrictStr] = None
    ghost_portrait_vs_portrait_similarity_score: Optional[StrictInt] = Field(default=None, alias="ghostPortraitVsPortraitSimilarityScore")
    issuing_authority: Optional[StrictStr] = Field(default=None, alias="issuingAuthority")
    issuing_authority_national_language: Optional[StrictStr] = Field(default=None, alias="issuingAuthorityNationalLanguage")
    mrz: Optional[StrictStr] = None
    notes: Optional[StrictStr] = None
    notes_national_language: Optional[StrictStr] = Field(default=None, alias="notesNationalLanguage")
    number: Optional[StrictStr] = None
    place_of_issue: Optional[StrictStr] = Field(default=None, alias="placeOfIssue")
    place_of_issue_national_language: Optional[StrictStr] = Field(default=None, alias="placeOfIssueNationalLanguage")
    portrait_vs_primary_selfie_similarity_score: Optional[StrictInt] = Field(default=None, alias="portraitVsPrimarySelfieSimilarityScore")
    primary: Optional[StrictBool] = None
    remarks: Optional[StrictStr] = None
    restrictions: Optional[StrictStr] = None
    section: Optional[StrictStr] = None
    travel_document_type: Optional[StrictStr] = Field(default=None, description="Enumeration of travel document types.", alias="travelDocumentType")
    trust_factors: Optional[List[TrustFactor]] = Field(default=None, alias="trustFactors")
    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["can", "conditions", "country", "dateAndPlaceOfIssue", "dateOfExpiry", "dateOfExpiryNationalLanguage", "dateOfExpiryText", "dateOfFirstRegistration", "dateOfFirstRegistrationText", "dateOfIssue", "dateOfIssueNationalLanguage", "dateOfIssueText", "documentPages", "drivingCategories", "drivingCategoriesNationalLanguage", "drivingLicenceVersion", "edition", "endorsements", "ghostPortraitVsPortraitSimilarityScore", "issuingAuthority", "issuingAuthorityNationalLanguage", "mrz", "notes", "notesNationalLanguage", "number", "placeOfIssue", "placeOfIssueNationalLanguage", "portraitVsPrimarySelfieSimilarityScore", "primary", "remarks", "restrictions", "section", "travelDocumentType", "trustFactors", "type"]

    @field_validator('travel_document_type')
    def travel_document_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('TD1', 'TD2', 'TD3'):
            raise ValueError("must be one of enum values ('TD1', 'TD2', 'TD3')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Document from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Document from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "can": obj.get("can"),
            "conditions": obj.get("conditions"),
            "country": obj.get("country"),
            "dateAndPlaceOfIssue": obj.get("dateAndPlaceOfIssue"),
            "dateOfExpiry": obj.get("dateOfExpiry"),
            "dateOfExpiryNationalLanguage": obj.get("dateOfExpiryNationalLanguage"),
            "dateOfExpiryText": obj.get("dateOfExpiryText"),
            "dateOfFirstRegistration": obj.get("dateOfFirstRegistration"),
            "dateOfFirstRegistrationText": obj.get("dateOfFirstRegistrationText"),
            "dateOfIssue": obj.get("dateOfIssue"),
            "dateOfIssueNationalLanguage": obj.get("dateOfIssueNationalLanguage"),
            "dateOfIssueText": obj.get("dateOfIssueText"),
            "drivingCategories": obj.get("drivingCategories"),
            "drivingCategoriesNationalLanguage": obj.get("drivingCategoriesNationalLanguage"),
            "drivingLicenceVersion": obj.get("drivingLicenceVersion"),
            "edition": obj.get("edition"),
            "endorsements": obj.get("endorsements"),
            "ghostPortraitVsPortraitSimilarityScore": obj.get("ghostPortraitVsPortraitSimilarityScore"),
            "issuingAuthority": obj.get("issuingAuthority"),
            "issuingAuthorityNationalLanguage": obj.get("issuingAuthorityNationalLanguage"),
            "mrz": obj.get("mrz"),
            "notes": obj.get("notes"),
            "notesNationalLanguage": obj.get("notesNationalLanguage"),
            "number": obj.get("number"),
            "placeOfIssue": obj.get("placeOfIssue"),
            "placeOfIssueNationalLanguage": obj.get("placeOfIssueNationalLanguage"),
            "portraitVsPrimarySelfieSimilarityScore": obj.get("portraitVsPrimarySelfieSimilarityScore"),
            "primary": obj.get("primary"),
            "remarks": obj.get("remarks"),
            "restrictions": obj.get("restrictions"),
            "section": obj.get("section"),
            "travelDocumentType": obj.get("travelDocumentType"),
            "type": obj.get("type")
        })
        return _obj


