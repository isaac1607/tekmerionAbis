# coding: utf-8

"""
    ABIS REST API

    Innovatrics ABIS proprietary REST API

    The version of the OpenAPI document: 6.62.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from abis.rest.client.models.embedding_template import EmbeddingTemplate
from abis.rest.client.models.ics_template import IcsTemplate
from abis.rest.client.models.latent_template import LatentTemplate
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FingerprintTemplateExtended(BaseModel):
    """
    List of extracted fingerprint ICS templates. Order of fingerprint templates corresponds to order of fingerprint images in extract request.
    """ # noqa: E501
    embedding_template: Optional[EmbeddingTemplate] = Field(default=None, alias="embeddingTemplate")
    ics_template: Optional[IcsTemplate] = Field(default=None, alias="icsTemplate")
    latent_template: Optional[LatentTemplate] = Field(default=None, alias="latentTemplate")
    position: Optional[StrictStr] = Field(default=None, description="Enumeration of fingerprint positions. This includes also palm and latent positions.")
    __properties: ClassVar[List[str]] = ["embeddingTemplate", "icsTemplate", "latentTemplate", "position"]

    @field_validator('position')
    def position_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('UnknownFinger', 'RightThumb', 'RightIndex', 'RightMiddle', 'RightRing', 'RightLittle', 'LeftThumb', 'LeftIndex', 'LeftMiddle', 'LeftRing', 'LeftLittle', 'PlainRightThumb', 'PlainLeftThumb', 'PlainRightFourFingers', 'PlainLeftFourFingers', 'PlainThumbsTogether', 'RightExtraDigit', 'LeftExtraDigit', 'UnknownFrictionRidge', 'EjiOrTip', 'UnknownPalm', 'RightFullPalm', 'RightWritersPalm', 'LeftFullPalm', 'LeftWritersPalm', 'RightLowerPalm', 'RightUpperPalm', 'LeftLowerPalm', 'LeftUpperPalm', 'RightOther', 'LeftOther', 'RightInterdigital', 'RightThenar', 'RightHypothenar', 'LeftInterdigital', 'LeftThenar', 'LeftHypothenar', 'RightGrasp', 'LeftGrasp', 'LatentPrint', 'RightCarpalDeltaArea', 'LeftCarpalDeltaArea', 'RightFullPalmAndWritersPalm', 'LeftFullPalmAndWritersPalm', 'RightWristBracelet', 'LeftWristBracelet'):
            raise ValueError("must be one of enum values ('UnknownFinger', 'RightThumb', 'RightIndex', 'RightMiddle', 'RightRing', 'RightLittle', 'LeftThumb', 'LeftIndex', 'LeftMiddle', 'LeftRing', 'LeftLittle', 'PlainRightThumb', 'PlainLeftThumb', 'PlainRightFourFingers', 'PlainLeftFourFingers', 'PlainThumbsTogether', 'RightExtraDigit', 'LeftExtraDigit', 'UnknownFrictionRidge', 'EjiOrTip', 'UnknownPalm', 'RightFullPalm', 'RightWritersPalm', 'LeftFullPalm', 'LeftWritersPalm', 'RightLowerPalm', 'RightUpperPalm', 'LeftLowerPalm', 'LeftUpperPalm', 'RightOther', 'LeftOther', 'RightInterdigital', 'RightThenar', 'RightHypothenar', 'LeftInterdigital', 'LeftThenar', 'LeftHypothenar', 'RightGrasp', 'LeftGrasp', 'LatentPrint', 'RightCarpalDeltaArea', 'LeftCarpalDeltaArea', 'RightFullPalmAndWritersPalm', 'LeftFullPalmAndWritersPalm', 'RightWristBracelet', 'LeftWristBracelet')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FingerprintTemplateExtended from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of embedding_template
        if self.embedding_template:
            _dict['embeddingTemplate'] = self.embedding_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ics_template
        if self.ics_template:
            _dict['icsTemplate'] = self.ics_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of latent_template
        if self.latent_template:
            _dict['latentTemplate'] = self.latent_template.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FingerprintTemplateExtended from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "embeddingTemplate": EmbeddingTemplate.from_dict(obj.get("embeddingTemplate")) if obj.get("embeddingTemplate") is not None else None,
            "icsTemplate": IcsTemplate.from_dict(obj.get("icsTemplate")) if obj.get("icsTemplate") is not None else None,
            "latentTemplate": LatentTemplate.from_dict(obj.get("latentTemplate")) if obj.get("latentTemplate") is not None else None,
            "position": obj.get("position")
        })
        return _obj


