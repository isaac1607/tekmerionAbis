# coding: utf-8

"""
    ABIS REST API

    Innovatrics ABIS proprietary REST API

    The version of the OpenAPI document: 6.62.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBytes, StrictInt, StrictStr, field_validator
from pydantic import Field
from abis.rest.client.models.face_image_qualities import FaceImageQualities
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FaceImage(BaseModel):
    """
    FaceImage
    """ # noqa: E501
    bits_per_pixel: Optional[StrictInt] = Field(default=None, alias="bitsPerPixel")
    byte_size: Optional[StrictInt] = Field(default=None, alias="byteSize")
    capture_device: Optional[StrictStr] = Field(default=None, alias="captureDevice")
    color_space: Optional[StrictStr] = Field(default=None, description="Enumeration of image color spaces.", alias="colorSpace")
    data_bytes: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, alias="dataBytes")
    data_url: Optional[StrictStr] = Field(default=None, description="One of dataBytes or dataUrl is required", alias="dataUrl")
    dpi: Optional[StrictInt] = None
    format: Optional[StrictStr] = Field(default=None, description="Enumeration of image format.")
    height: Optional[StrictInt] = None
    horizontal_pixel_scale: Optional[StrictInt] = Field(default=None, alias="horizontalPixelScale")
    qualities: Optional[FaceImageQualities] = None
    resolution_dpi: Optional[StrictInt] = Field(default=None, alias="resolutionDpi")
    scale_unit: Optional[StrictStr] = Field(default=None, description="Enumeration of image scale units.", alias="scaleUnit")
    vertical_pixel_scale: Optional[StrictInt] = Field(default=None, alias="verticalPixelScale")
    width: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["bitsPerPixel", "byteSize", "captureDevice", "colorSpace", "dataBytes", "dataUrl", "dpi", "format", "height", "horizontalPixelScale", "qualities", "resolutionDpi", "scaleUnit", "verticalPixelScale", "width"]

    @field_validator('color_space')
    def color_space_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('UNK', 'GRAY', 'RGB', 'SRGB', 'YCC', 'SYCC'):
            raise ValueError("must be one of enum values ('UNK', 'GRAY', 'RGB', 'SRGB', 'YCC', 'SYCC')")
        return value

    @field_validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('BMP', 'GIF', 'ISO_JPEG_2_K', 'ISO_PNG', 'ISO_UNCOMPRESSED', 'ISO_WSQ', 'JPEG_2_K', 'JPG', 'PNG', 'TIF', 'WSQ'):
            raise ValueError("must be one of enum values ('BMP', 'GIF', 'ISO_JPEG_2_K', 'ISO_PNG', 'ISO_UNCOMPRESSED', 'ISO_WSQ', 'JPEG_2_K', 'JPG', 'PNG', 'TIF', 'WSQ')")
        return value

    @field_validator('scale_unit')
    def scale_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('UNDEFINED', 'PIXELS_PER_INCH', 'PIXELS_PER_CM'):
            raise ValueError("must be one of enum values ('UNDEFINED', 'PIXELS_PER_INCH', 'PIXELS_PER_CM')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FaceImage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "byte_size",
                "dpi",
                "format",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of qualities
        if self.qualities:
            _dict['qualities'] = self.qualities.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FaceImage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bitsPerPixel": obj.get("bitsPerPixel"),
            "byteSize": obj.get("byteSize"),
            "captureDevice": obj.get("captureDevice"),
            "colorSpace": obj.get("colorSpace"),
            "dataBytes": obj.get("dataBytes"),
            "dataUrl": obj.get("dataUrl"),
            "dpi": obj.get("dpi"),
            "format": obj.get("format"),
            "height": obj.get("height"),
            "horizontalPixelScale": obj.get("horizontalPixelScale"),
            "qualities": FaceImageQualities.from_dict(obj.get("qualities")) if obj.get("qualities") is not None else None,
            "resolutionDpi": obj.get("resolutionDpi"),
            "scaleUnit": obj.get("scaleUnit"),
            "verticalPixelScale": obj.get("verticalPixelScale"),
            "width": obj.get("width")
        })
        return _obj


