# coding: utf-8

"""
    ABIS REST API

    Innovatrics ABIS proprietary REST API

    The version of the OpenAPI document: 6.62.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ConvertFileRequest(BaseModel):
    """
    ConvertFileRequest
    """ # noqa: E501
    file_id: StrictStr = Field(description="File id of input file", alias="fileId")
    from_encoding: Optional[StrictStr] = Field(default=None, description="Defines encoding of the destination file. This field is mandatory for conversion to formats based on NIST standard.", alias="fromEncoding")
    from_standard: StrictStr = Field(description="Standard of imported file.", alias="fromStandard")
    remove_after_conversion: Optional[StrictBool] = Field(default=None, description="Specifies whether the imported applicant, created during conversion, should be removed after conversion. The default value is true.", alias="removeAfterConversion")
    to_encoding: Optional[StrictStr] = Field(default=None, description="Defines encoding of the destination file. This field is mandatory for conversion to formats based on NIST standard.", alias="toEncoding")
    to_standard: StrictStr = Field(description="Standard of imported file.", alias="toStandard")
    __properties: ClassVar[List[str]] = ["fileId", "fromEncoding", "fromStandard", "removeAfterConversion", "toEncoding", "toStandard"]

    @field_validator('from_encoding')
    def from_encoding_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('xml', 'bytes'):
            raise ValueError("must be one of enum values ('xml', 'bytes')")
        return value

    @field_validator('from_standard')
    def from_standard_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ebts_v11_0', 'dod_ebts_v4_1', 'interpol_v6', 'nist_itl', 'abis_v9'):
            raise ValueError("must be one of enum values ('ebts_v11_0', 'dod_ebts_v4_1', 'interpol_v6', 'nist_itl', 'abis_v9')")
        return value

    @field_validator('to_encoding')
    def to_encoding_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('xml', 'bytes'):
            raise ValueError("must be one of enum values ('xml', 'bytes')")
        return value

    @field_validator('to_standard')
    def to_standard_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ebts_v11_0', 'dod_ebts_v4_1', 'interpol_v6', 'nist_itl', 'abis_v9'):
            raise ValueError("must be one of enum values ('ebts_v11_0', 'dod_ebts_v4_1', 'interpol_v6', 'nist_itl', 'abis_v9')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ConvertFileRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ConvertFileRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fileId": obj.get("fileId"),
            "fromEncoding": obj.get("fromEncoding"),
            "fromStandard": obj.get("fromStandard"),
            "removeAfterConversion": obj.get("removeAfterConversion"),
            "toEncoding": obj.get("toEncoding"),
            "toStandard": obj.get("toStandard")
        })
        return _obj


