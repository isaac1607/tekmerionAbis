# coding: utf-8

"""
    ABIS REST API

    Innovatrics ABIS proprietary REST API

    The version of the OpenAPI document: 6.62.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ConfigTrustFactorDefinition(BaseModel):
    """
    ConfigTrustFactorDefinition
    """ # noqa: E501
    display_in_ui: Optional[StrictStr] = Field(default=None, description="Enumeration of trust factor display in UI options.", alias="displayInUi")
    icon: Optional[StrictStr] = None
    reject_high_threshold: Optional[StrictInt] = Field(default=None, alias="rejectHighThreshold")
    reject_if_false: Optional[StrictBool] = Field(default=None, alias="rejectIfFalse")
    reject_if_true: Optional[StrictBool] = Field(default=None, alias="rejectIfTrue")
    reject_low_threshold: Optional[StrictInt] = Field(default=None, alias="rejectLowThreshold")
    review_high_threshold: Optional[StrictInt] = Field(default=None, alias="reviewHighThreshold")
    review_if_false: Optional[StrictBool] = Field(default=None, alias="reviewIfFalse")
    review_if_true: Optional[StrictBool] = Field(default=None, alias="reviewIfTrue")
    review_low_threshold: Optional[StrictInt] = Field(default=None, alias="reviewLowThreshold")
    type: Optional[StrictStr] = None
    ui_normalization: Optional[StrictInt] = Field(default=None, alias="uiNormalization")
    ui_position: Optional[StrictInt] = Field(default=None, alias="uiPosition")
    __properties: ClassVar[List[str]] = ["displayInUi", "icon", "rejectHighThreshold", "rejectIfFalse", "rejectIfTrue", "rejectLowThreshold", "reviewHighThreshold", "reviewIfFalse", "reviewIfTrue", "reviewLowThreshold", "type", "uiNormalization", "uiPosition"]

    @field_validator('display_in_ui')
    def display_in_ui_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('TF_SCORE', 'TF_RESULT', 'TF_NOT_DISPLAYED'):
            raise ValueError("must be one of enum values ('TF_SCORE', 'TF_RESULT', 'TF_NOT_DISPLAYED')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ConfigTrustFactorDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ConfigTrustFactorDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayInUi": obj.get("displayInUi"),
            "icon": obj.get("icon"),
            "rejectHighThreshold": obj.get("rejectHighThreshold"),
            "rejectIfFalse": obj.get("rejectIfFalse"),
            "rejectIfTrue": obj.get("rejectIfTrue"),
            "rejectLowThreshold": obj.get("rejectLowThreshold"),
            "reviewHighThreshold": obj.get("reviewHighThreshold"),
            "reviewIfFalse": obj.get("reviewIfFalse"),
            "reviewIfTrue": obj.get("reviewIfTrue"),
            "reviewLowThreshold": obj.get("reviewLowThreshold"),
            "type": obj.get("type"),
            "uiNormalization": obj.get("uiNormalization"),
            "uiPosition": obj.get("uiPosition")
        })
        return _obj


