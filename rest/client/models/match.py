# coding: utf-8

"""
    ABIS REST API

    Innovatrics ABIS proprietary REST API

    The version of the OpenAPI document: 6.62.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Match(BaseModel):
    """
    Match
    """ # noqa: E501
    candidates: Optional[List[Candidate]] = None
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    id: Optional[StrictInt] = Field(default=None, description="Please note that the ID field should no longer be used and will be removed in the future. Instead, please use the 'externalId' field as a match identifier.")
    matching_parameters: Optional[List[MatchingParameters]] = Field(default=None, alias="matchingParameters")
    metadata: Optional[StrictStr] = None
    probe_external_id: Optional[StrictStr] = Field(default=None, alias="probeExternalId")
    probe_id: Optional[StrictInt] = Field(default=None, alias="probeId")
    type: Optional[StrictStr] = Field(default=None, description="Enumeration of match types.")
    uuid: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["candidates", "externalId", "id", "matchingParameters", "metadata", "probeExternalId", "probeId", "type", "uuid"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('verification', 'identification'):
            raise ValueError("must be one of enum values ('verification', 'identification')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Match from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Match from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "externalId": obj.get("externalId"),
            "id": obj.get("id"),
            "metadata": obj.get("metadata"),
            "probeExternalId": obj.get("probeExternalId"),
            "probeId": obj.get("probeId"),
            "type": obj.get("type"),
            "uuid": obj.get("uuid")
        })
        return _obj


