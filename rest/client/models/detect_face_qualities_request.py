# coding: utf-8

"""
    ABIS REST API

    Innovatrics ABIS proprietary REST API

    The version of the OpenAPI document: 6.62.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from abis.rest.client.models.face_detection_parameters import FaceDetectionParameters
from abis.rest.client.models.face_image_extended import FaceImageExtended
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DetectFaceQualitiesRequest(BaseModel):
    """
    DetectFaceQualitiesRequest
    """ # noqa: E501
    detection_parameters: Optional[FaceDetectionParameters] = Field(default=None, alias="detectionParameters")
    image: FaceImageExtended
    quality_groups: Optional[List[str]] = Field(default=None, description="Face quality groups to be detected. If not specified, all groups will be detected.", alias="qualityGroups")
    __properties: ClassVar[List[str]] = ["detectionParameters", "image", "qualityGroups"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DetectFaceQualitiesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of detection_parameters
        if self.detection_parameters:
            _dict['detectionParameters'] = self.detection_parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DetectFaceQualitiesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "detectionParameters": FaceDetectionParameters.from_dict(obj.get("detectionParameters")) if obj.get("detectionParameters") is not None else None,
            "image": FaceImageExtended.from_dict(obj.get("image")) if obj.get("image") is not None else None,
        })
        return _obj


