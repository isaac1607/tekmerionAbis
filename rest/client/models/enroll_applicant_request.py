# coding: utf-8

"""
    ABIS REST API

    Innovatrics ABIS proprietary REST API

    The version of the OpenAPI document: 6.62.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from abis.rest.client.models.applicant_custom_details import ApplicantCustomDetails
from abis.rest.client.models.applicant_document import ApplicantDocument
from abis.rest.client.models.attachment import Attachment
from abis.rest.client.models.body_characteristic import BodyCharacteristic
from abis.rest.client.models.face_characteristic import FaceCharacteristic
from abis.rest.client.models.smt_characteristic import SmtCharacteristic
from abis.rest.client.models.enroll_action import EnrollAction
from abis.rest.client.models.extraction_parameters import ExtractionParameters
from abis.rest.client.models.full_applicant_dna_modality import FullApplicantDnaModality
from abis.rest.client.models.full_applicant_face_modality import FullApplicantFaceModality
from abis.rest.client.models.full_applicant_fingerprint_modality import FullApplicantFingerprintModality
from abis.rest.client.models.full_applicant_iris_modality import FullApplicantIrisModality
from abis.rest.client.models.full_applicant_signature_modality import FullApplicantSignatureModality
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class EnrollApplicantRequest(BaseModel):
    """
    EnrollApplicantRequest
    """ # noqa: E501
    attachments: Optional[List[Attachment]] = None
    body_characteristics: Optional[List[BodyCharacteristic]] = Field(default=None, alias="bodyCharacteristics")
    category: Optional[StrictStr] = None
    custom_details: Optional[ApplicantCustomDetails] = Field(default=None, alias="customDetails")
    dna_modality: Optional[FullApplicantDnaModality] = Field(default=None, alias="dnaModality")
    documents: Optional[List[ApplicantDocument]] = None
    enroll_action: Optional[EnrollAction] = Field(default=None, alias="enrollAction")
    enrolled_at: Optional[datetime] = Field(default=None, description="A date-time format in the ISO-8601 calendar system", alias="enrolledAt")
    enrolled_by: Optional[StrictStr] = Field(default=None, alias="enrolledBy")
    enrollment_device: Optional[StrictStr] = Field(default=None, alias="enrollmentDevice")
    exported_at: Optional[datetime] = Field(default=None, description="A date-time format in the ISO-8601 calendar system", alias="exportedAt")
    exported_by: Optional[StrictStr] = Field(default=None, alias="exportedBy")
    external_id: Optional[StrictStr] = Field(default=None, description="External Identifier", alias="externalId")
    extraction_parameters: Optional[ExtractionParameters] = Field(default=None, alias="extractionParameters")
    face_characteristics: Optional[List[FaceCharacteristic]] = Field(default=None, alias="faceCharacteristics")
    face_modality: Optional[FullApplicantFaceModality] = Field(default=None, alias="faceModality")
    fingerprint_modality: Optional[FullApplicantFingerprintModality] = Field(default=None, alias="fingerprintModality")
    gallery: Optional[StrictStr] = None
    iris_modality: Optional[FullApplicantIrisModality] = Field(default=None, alias="irisModality")
    origin_external_id: Optional[StrictStr] = Field(default=None, description="Origin External Identifier", alias="originExternalId")
    signature_modality: Optional[FullApplicantSignatureModality] = Field(default=None, alias="signatureModality")
    smt_characteristics: Optional[List[SmtCharacteristic]] = Field(default=None, alias="smtCharacteristics")
    __properties: ClassVar[List[str]] = ["attachments", "bodyCharacteristics", "category", "customDetails", "dnaModality", "documents", "enrollAction", "enrolledAt", "enrolledBy", "enrollmentDevice", "exportedAt", "exportedBy", "externalId", "extractionParameters", "faceCharacteristics", "faceModality", "fingerprintModality", "gallery", "irisModality", "originExternalId", "signatureModality", "smtCharacteristics"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EnrollApplicantRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_details
        if self.custom_details:
            _dict['customDetails'] = self.custom_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dna_modality
        if self.dna_modality:
            _dict['dnaModality'] = self.dna_modality.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enroll_action
        if self.enroll_action:
            _dict['enrollAction'] = self.enroll_action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extraction_parameters
        if self.extraction_parameters:
            _dict['extractionParameters'] = self.extraction_parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of face_modality
        if self.face_modality:
            _dict['faceModality'] = self.face_modality.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fingerprint_modality
        if self.fingerprint_modality:
            _dict['fingerprintModality'] = self.fingerprint_modality.to_dict()
        # override the default output from pydantic by calling `to_dict()` of iris_modality
        if self.iris_modality:
            _dict['irisModality'] = self.iris_modality.to_dict()
        # override the default output from pydantic by calling `to_dict()` of signature_modality
        if self.signature_modality:
            _dict['signatureModality'] = self.signature_modality.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of EnrollApplicantRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "customDetails": ApplicantCustomDetails.from_dict(obj.get("customDetails")) if obj.get("customDetails") is not None else None,
            "dnaModality": FullApplicantDnaModality.from_dict(obj.get("dnaModality")) if obj.get("dnaModality") is not None else None,
            "enrollAction": EnrollAction.from_dict(obj.get("enrollAction")) if obj.get("enrollAction") is not None else None,
            "enrolledAt": obj.get("enrolledAt"),
            "enrolledBy": obj.get("enrolledBy"),
            "enrollmentDevice": obj.get("enrollmentDevice"),
            "exportedAt": obj.get("exportedAt"),
            "exportedBy": obj.get("exportedBy"),
            "externalId": obj.get("externalId"),
            "extractionParameters": ExtractionParameters.from_dict(obj.get("extractionParameters")) if obj.get("extractionParameters") is not None else None,
            "faceModality": FullApplicantFaceModality.from_dict(obj.get("faceModality")) if obj.get("faceModality") is not None else None,
            "fingerprintModality": FullApplicantFingerprintModality.from_dict(obj.get("fingerprintModality")) if obj.get("fingerprintModality") is not None else None,
            "gallery": obj.get("gallery"),
            "irisModality": FullApplicantIrisModality.from_dict(obj.get("irisModality")) if obj.get("irisModality") is not None else None,
            "originExternalId": obj.get("originExternalId"),
            "signatureModality": FullApplicantSignatureModality.from_dict(obj.get("signatureModality")) if obj.get("signatureModality") is not None else None,
        })
        return _obj


