# coding: utf-8

"""
    ABIS REST API

    Innovatrics ABIS proprietary REST API

    The version of the OpenAPI document: 6.62.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
from abis.rest.client.models.fingerprint_image import FingerprintImage
from abis.rest.client.models.fingerprint_template import FingerprintTemplate
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Fingerprint(BaseModel):
    """
    Fingerprint
    """ # noqa: E501
    capture_date: Optional[datetime] = Field(default=None, description="A date-time format in the ISO-8601 calendar system", alias="captureDate")
    image: Optional[FingerprintImage] = None
    impression_type: Optional[StrictStr] = Field(default=None, description="Enumeration of fingerprint and palm impression types.", alias="impressionType")
    index: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    position: Optional[StrictStr] = Field(default=None, description="Enumeration of fingerprint positions. This includes also palm and latent positions.")
    template: Optional[FingerprintTemplate] = None
    __properties: ClassVar[List[str]] = ["captureDate", "image", "impressionType", "index", "position", "template"]

    @field_validator('impression_type')
    def impression_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('PlainContact', 'RolledContact', 'LatentImage', 'LiveSwipe', 'LiveScanPlain', 'NonliveScanPlain', 'PlainContactlessStationary', 'RolledContactlessStationary', 'Other', 'Unknown', 'RolledContactlessMoving', 'PlainContactlessMoving'):
            raise ValueError("must be one of enum values ('PlainContact', 'RolledContact', 'LatentImage', 'LiveSwipe', 'LiveScanPlain', 'NonliveScanPlain', 'PlainContactlessStationary', 'RolledContactlessStationary', 'Other', 'Unknown', 'RolledContactlessMoving', 'PlainContactlessMoving')")
        return value

    @field_validator('position')
    def position_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('UnknownFinger', 'RightThumb', 'RightIndex', 'RightMiddle', 'RightRing', 'RightLittle', 'LeftThumb', 'LeftIndex', 'LeftMiddle', 'LeftRing', 'LeftLittle', 'PlainRightThumb', 'PlainLeftThumb', 'PlainRightFourFingers', 'PlainLeftFourFingers', 'PlainThumbsTogether', 'RightExtraDigit', 'LeftExtraDigit', 'UnknownFrictionRidge', 'EjiOrTip', 'UnknownPalm', 'RightFullPalm', 'RightWritersPalm', 'LeftFullPalm', 'LeftWritersPalm', 'RightLowerPalm', 'RightUpperPalm', 'LeftLowerPalm', 'LeftUpperPalm', 'RightOther', 'LeftOther', 'RightInterdigital', 'RightThenar', 'RightHypothenar', 'LeftInterdigital', 'LeftThenar', 'LeftHypothenar', 'RightGrasp', 'LeftGrasp', 'LatentPrint', 'RightCarpalDeltaArea', 'LeftCarpalDeltaArea', 'RightFullPalmAndWritersPalm', 'LeftFullPalmAndWritersPalm', 'RightWristBracelet', 'LeftWristBracelet'):
            raise ValueError("must be one of enum values ('UnknownFinger', 'RightThumb', 'RightIndex', 'RightMiddle', 'RightRing', 'RightLittle', 'LeftThumb', 'LeftIndex', 'LeftMiddle', 'LeftRing', 'LeftLittle', 'PlainRightThumb', 'PlainLeftThumb', 'PlainRightFourFingers', 'PlainLeftFourFingers', 'PlainThumbsTogether', 'RightExtraDigit', 'LeftExtraDigit', 'UnknownFrictionRidge', 'EjiOrTip', 'UnknownPalm', 'RightFullPalm', 'RightWritersPalm', 'LeftFullPalm', 'LeftWritersPalm', 'RightLowerPalm', 'RightUpperPalm', 'LeftLowerPalm', 'LeftUpperPalm', 'RightOther', 'LeftOther', 'RightInterdigital', 'RightThenar', 'RightHypothenar', 'LeftInterdigital', 'LeftThenar', 'LeftHypothenar', 'RightGrasp', 'LeftGrasp', 'LatentPrint', 'RightCarpalDeltaArea', 'LeftCarpalDeltaArea', 'RightFullPalmAndWritersPalm', 'LeftFullPalmAndWritersPalm', 'RightWristBracelet', 'LeftWristBracelet')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Fingerprint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of template
        if self.template:
            _dict['template'] = self.template.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Fingerprint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "captureDate": obj.get("captureDate"),
            "image": FingerprintImage.from_dict(obj.get("image")) if obj.get("image") is not None else None,
            "impressionType": obj.get("impressionType"),
            "index": obj.get("index"),
            "position": obj.get("position"),
            "template": FingerprintTemplate.from_dict(obj.get("template")) if obj.get("template") is not None else None
        })
        return _obj


