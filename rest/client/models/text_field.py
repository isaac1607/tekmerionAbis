# coding: utf-8

"""
    ABIS REST API

    Innovatrics ABIS proprietary REST API

    The version of the OpenAPI document: 6.62.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TextField(BaseModel):
    """
    TextField
    """ # noqa: E501
    height: Optional[StrictInt] = None
    label: Optional[StrictStr] = None
    ocr_confidence: Optional[StrictInt] = Field(default=None, alias="ocrConfidence")
    orientation: Optional[StrictInt] = None
    raw_value: Optional[StrictStr] = Field(default=None, alias="rawValue")
    type: Optional[StrictStr] = None
    value: Optional[StrictStr] = None
    width: Optional[StrictInt] = None
    x: Optional[StrictInt] = None
    y: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["height", "label", "ocrConfidence", "orientation", "rawValue", "type", "value", "width", "x", "y"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TextField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TextField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "height": obj.get("height"),
            "label": obj.get("label"),
            "ocrConfidence": obj.get("ocrConfidence"),
            "orientation": obj.get("orientation"),
            "rawValue": obj.get("rawValue"),
            "type": obj.get("type"),
            "value": obj.get("value"),
            "width": obj.get("width"),
            "x": obj.get("x"),
            "y": obj.get("y")
        })
        return _obj


