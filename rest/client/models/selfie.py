# coding: utf-8

"""
    ABIS REST API

    Innovatrics ABIS proprietary REST API

    The version of the OpenAPI document: 6.62.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
from abis.rest.client.models.face_bounding_box import FaceBoundingBox
from abis.rest.client.models.face_icao_attributes import FaceICAOAttributes
from abis.rest.client.models.face_image import FaceImage
from abis.rest.client.models.face_template import FaceTemplate
from abis.rest.client.models.region_of_interest import RegionOfInterest
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Selfie(BaseModel):
    """
    Selfie
    """ # noqa: E501
    bounding_box: Optional[FaceBoundingBox] = Field(default=None, alias="boundingBox")
    capture_date: Optional[datetime] = Field(default=None, description="A date-time format in the ISO-8601 calendar system", alias="captureDate")
    capture_mode: Optional[StrictStr] = Field(default=None, alias="captureMode")
    face_rectangle: Optional[RegionOfInterest] = Field(default=None, alias="faceRectangle")
    icao_attributes: Optional[FaceICAOAttributes] = Field(default=None, alias="icaoAttributes")
    icao_crop_coordinates: Optional[RegionOfInterest] = Field(default=None, alias="icaoCropCoordinates")
    image: Optional[FaceImage] = None
    index: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    photo_ratio: Optional[StrictStr] = Field(default=None, alias="photoRatio")
    primary: Optional[StrictBool] = None
    subject_acquisition_profile: Optional[StrictStr] = Field(default=None, description="Enumeration of image scale units.", alias="subjectAcquisitionProfile")
    subject_pose_code: Optional[StrictStr] = Field(default=None, alias="subjectPoseCode")
    template: Optional[FaceTemplate] = None
    __properties: ClassVar[List[str]] = ["boundingBox", "captureDate", "captureMode", "faceRectangle", "icaoAttributes", "icaoCropCoordinates", "image", "index", "photoRatio", "primary", "subjectAcquisitionProfile", "subjectPoseCode", "template"]

    @field_validator('subject_acquisition_profile')
    def subject_acquisition_profile_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('UNKNOWN_ACQUISITION', 'SURVEILLANCE_FACIAL_IMAGE', 'DRIVERS_LICENSE_IMAGE', 'ANSI_FULL_FRONTAL_FACIAL_IMAGE', 'ANSI_TOKEN_FACIAL_IMAGE', 'ISO_FULL_FRONTAL_FACIAL_IMAGE', 'ISO_TOKEN_FACIAL_IMAGE', 'PIV_FACIAL_IMAGE', 'LEGACY_MUGSHOT', 'BEST_PRACTICE_APPLICATION_LEVEL_30', 'MOBILE_ID_BEST_PRACTICE_LEVEL_32', 'BEST_PRACTICE_APPLICATION_LEVEL_40', 'MOBILE_ID_BEST_PRACTICE_LEVEL_42', 'BEST_PRACTICE_APPLICATION_LEVEL_50', 'BEST_PRACTICE_APPLICATION_LEVEL_51', 'MOBILE_ID_BEST_PRACTICE_LEVEL_52'):
            raise ValueError("must be one of enum values ('UNKNOWN_ACQUISITION', 'SURVEILLANCE_FACIAL_IMAGE', 'DRIVERS_LICENSE_IMAGE', 'ANSI_FULL_FRONTAL_FACIAL_IMAGE', 'ANSI_TOKEN_FACIAL_IMAGE', 'ISO_FULL_FRONTAL_FACIAL_IMAGE', 'ISO_TOKEN_FACIAL_IMAGE', 'PIV_FACIAL_IMAGE', 'LEGACY_MUGSHOT', 'BEST_PRACTICE_APPLICATION_LEVEL_30', 'MOBILE_ID_BEST_PRACTICE_LEVEL_32', 'BEST_PRACTICE_APPLICATION_LEVEL_40', 'MOBILE_ID_BEST_PRACTICE_LEVEL_42', 'BEST_PRACTICE_APPLICATION_LEVEL_50', 'BEST_PRACTICE_APPLICATION_LEVEL_51', 'MOBILE_ID_BEST_PRACTICE_LEVEL_52')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Selfie from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bounding_box
        if self.bounding_box:
            _dict['boundingBox'] = self.bounding_box.to_dict()
        # override the default output from pydantic by calling `to_dict()` of face_rectangle
        if self.face_rectangle:
            _dict['faceRectangle'] = self.face_rectangle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of icao_attributes
        if self.icao_attributes:
            _dict['icaoAttributes'] = self.icao_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of icao_crop_coordinates
        if self.icao_crop_coordinates:
            _dict['icaoCropCoordinates'] = self.icao_crop_coordinates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of template
        if self.template:
            _dict['template'] = self.template.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Selfie from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boundingBox": FaceBoundingBox.from_dict(obj.get("boundingBox")) if obj.get("boundingBox") is not None else None,
            "captureDate": obj.get("captureDate"),
            "captureMode": obj.get("captureMode"),
            "faceRectangle": RegionOfInterest.from_dict(obj.get("faceRectangle")) if obj.get("faceRectangle") is not None else None,
            "icaoAttributes": FaceICAOAttributes.from_dict(obj.get("icaoAttributes")) if obj.get("icaoAttributes") is not None else None,
            "icaoCropCoordinates": RegionOfInterest.from_dict(obj.get("icaoCropCoordinates")) if obj.get("icaoCropCoordinates") is not None else None,
            "image": FaceImage.from_dict(obj.get("image")) if obj.get("image") is not None else None,
            "index": obj.get("index"),
            "photoRatio": obj.get("photoRatio"),
            "primary": obj.get("primary"),
            "subjectAcquisitionProfile": obj.get("subjectAcquisitionProfile"),
            "subjectPoseCode": obj.get("subjectPoseCode"),
            "template": FaceTemplate.from_dict(obj.get("template")) if obj.get("template") is not None else None
        })
        return _obj


