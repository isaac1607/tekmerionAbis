# coding: utf-8

"""
    ABIS REST API

    Innovatrics ABIS proprietary REST API

    The version of the OpenAPI document: 6.62.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DeleteApplicantResponse(BaseModel):
    """
    DeleteApplicantResponse
    """ # noqa: E501
    external_id: Optional[StrictStr] = Field(default=None, description="External Identifier", alias="externalId")
    id: Optional[StrictInt] = Field(default=None, description="Internal Applicant Identifier")
    individual_id: Optional[StrictInt] = Field(default=None, alias="individualId")
    individual_status: Optional[StrictStr] = Field(default=None, description="Biometric individual in the AFIS has a status which may change in time as a result of automatic or manual action.", alias="individualStatus")
    old_individual_status: Optional[StrictStr] = Field(default=None, description="Biometric individual in the AFIS has a status which may change in time as a result of automatic or manual action.", alias="oldIndividualStatus")
    old_status: Optional[StrictStr] = Field(default=None, description="Applicant in the AFIS has a status which may change in time as a result of automatic or manual action.", alias="oldStatus")
    origin_external_id: Optional[StrictStr] = Field(default=None, description="Origin External Identifier", alias="originExternalId")
    status: Optional[StrictStr] = Field(default=None, description="Applicant in the AFIS has a status which may change in time as a result of automatic or manual action.")
    __properties: ClassVar[List[str]] = ["externalId", "id", "individualId", "individualStatus", "oldIndividualStatus", "oldStatus", "originExternalId", "status"]

    @field_validator('individual_status')
    def individual_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('archived', 'deceased', 'deleted', 'duplicate', 'empty', 'enrolled', 'mismatched', 'pending', 'rejected', 'split', 'unique'):
            raise ValueError("must be one of enum values ('archived', 'deceased', 'deleted', 'duplicate', 'empty', 'enrolled', 'mismatched', 'pending', 'rejected', 'split', 'unique')")
        return value

    @field_validator('old_individual_status')
    def old_individual_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('archived', 'deceased', 'deleted', 'duplicate', 'empty', 'enrolled', 'mismatched', 'pending', 'rejected', 'split', 'unique'):
            raise ValueError("must be one of enum values ('archived', 'deceased', 'deleted', 'duplicate', 'empty', 'enrolled', 'mismatched', 'pending', 'rejected', 'split', 'unique')")
        return value

    @field_validator('old_status')
    def old_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('archived', 'captured', 'enrolled', 'deleted', 'duplicate', 'end_of_life', 'master', 'mismatched', 'rejected', 'suspect', 'void', 'declined', 'review', 'ready', 'draft', 'under_review'):
            raise ValueError("must be one of enum values ('archived', 'captured', 'enrolled', 'deleted', 'duplicate', 'end_of_life', 'master', 'mismatched', 'rejected', 'suspect', 'void', 'declined', 'review', 'ready', 'draft', 'under_review')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('archived', 'captured', 'enrolled', 'deleted', 'duplicate', 'end_of_life', 'master', 'mismatched', 'rejected', 'suspect', 'void', 'declined', 'review', 'ready', 'draft', 'under_review'):
            raise ValueError("must be one of enum values ('archived', 'captured', 'enrolled', 'deleted', 'duplicate', 'end_of_life', 'master', 'mismatched', 'rejected', 'suspect', 'void', 'declined', 'review', 'ready', 'draft', 'under_review')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DeleteApplicantResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DeleteApplicantResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "externalId": obj.get("externalId"),
            "id": obj.get("id"),
            "individualId": obj.get("individualId"),
            "individualStatus": obj.get("individualStatus"),
            "oldIndividualStatus": obj.get("oldIndividualStatus"),
            "oldStatus": obj.get("oldStatus"),
            "originExternalId": obj.get("originExternalId"),
            "status": obj.get("status")
        })
        return _obj


