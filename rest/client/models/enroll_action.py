# coding: utf-8

"""
    ABIS REST API

    Innovatrics ABIS proprietary REST API

    The version of the OpenAPI document: 6.62.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from abis.rest.client.models.verification_parameters import VerificationParameters
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class EnrollAction(BaseModel):
    """
    EnrollAction
    """ # noqa: E501
    archived_applicant_status: Optional[StrictStr] = Field(default='archived', description="Applicant in the AFIS has a status which may change in time as a result of automatic or manual action.", alias="archivedApplicantStatus")
    enroll_action_type: StrictStr = Field(description="Enumeration of enroll actions.   None - Enrollment without any enroll action. The applicant status will be set to 'enrolled'    Deduplicate - Enrollment with deduplication. The applicant status will be set to 'master' or 'duplicate' based on the identification result    BiometricUpdate - Enrollment with biometric update. The applicant status will be set to 'master' or 'mismatched' based on the verification result    Masterize - Enrollment without any enroll action. The applicant status will be set to 'master'  ", alias="enrollActionType")
    reference_external_id: Optional[StrictStr] = Field(default=None, description="External Identifier of reference applicant to be used in biometric update", alias="referenceExternalId")
    verification_parameters: Optional[VerificationParameters] = Field(default=None, alias="verificationParameters")
    __properties: ClassVar[List[str]] = ["archivedApplicantStatus", "enrollActionType", "referenceExternalId", "verificationParameters"]

    @field_validator('archived_applicant_status')
    def archived_applicant_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('archived', 'captured', 'enrolled', 'deleted', 'duplicate', 'end_of_life', 'master', 'mismatched', 'rejected', 'suspect', 'void', 'declined', 'review', 'ready', 'draft', 'under_review'):
            raise ValueError("must be one of enum values ('archived', 'captured', 'enrolled', 'deleted', 'duplicate', 'end_of_life', 'master', 'mismatched', 'rejected', 'suspect', 'void', 'declined', 'review', 'ready', 'draft', 'under_review')")
        return value

    @field_validator('enroll_action_type')
    def enroll_action_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('None', 'Deduplicate', 'BiometricUpdate', 'Masterize'):
            raise ValueError("must be one of enum values ('None', 'Deduplicate', 'BiometricUpdate', 'Masterize')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EnrollAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of verification_parameters
        if self.verification_parameters:
            _dict['verificationParameters'] = self.verification_parameters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of EnrollAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archivedApplicantStatus": obj.get("archivedApplicantStatus") if obj.get("archivedApplicantStatus") is not None else 'archived',
            "enrollActionType": obj.get("enrollActionType") if obj.get("enrollActionType") is not None else 'Deduplicate',
            "referenceExternalId": obj.get("referenceExternalId"),
            "verificationParameters": VerificationParameters.from_dict(obj.get("verificationParameters")) if obj.get("verificationParameters") is not None else None
        })
        return _obj


