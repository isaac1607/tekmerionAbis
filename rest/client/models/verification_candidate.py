# coding: utf-8

"""
    ABIS REST API

    Innovatrics ABIS proprietary REST API

    The version of the OpenAPI document: 6.62.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VerificationCandidate(BaseModel):
    """
    VerificationCandidate
    """ # noqa: E501
    external_id: Optional[StrictStr] = Field(default=None, description="External Identifier", alias="externalId")
    face_partial_score: Optional[List[FacePartialScore]] = Field(default=None, alias="facePartialScore")
    face_score: Optional[StrictInt] = Field(default=None, alias="faceScore")
    fingerprint_embedding_partial_score: Optional[List[FingerprintEmbeddingPartialScore]] = Field(default=None, alias="fingerprintEmbeddingPartialScore")
    fingerprint_embedding_score: Optional[StrictInt] = Field(default=None, alias="fingerprintEmbeddingScore")
    fingerprint_partial_score: Optional[List[FingerprintPartialScore]] = Field(default=None, alias="fingerprintPartialScore")
    fingerprint_score: Optional[StrictInt] = Field(default=None, alias="fingerprintScore")
    id: Optional[StrictInt] = Field(default=None, description="Internal Applicant Identifier")
    iris_partial_score: Optional[List[IrisPartialScore]] = Field(default=None, alias="irisPartialScore")
    iris_score: Optional[StrictInt] = Field(default=None, alias="irisScore")
    origin_external_id: Optional[StrictStr] = Field(default=None, description="Origin External Identifier", alias="originExternalId")
    palmprint_partial_score: Optional[List[FingerprintPartialScore]] = Field(default=None, alias="palmprintPartialScore")
    palmprint_score: Optional[StrictInt] = Field(default=None, alias="palmprintScore")
    verification_score: Optional[StrictInt] = Field(default=None, alias="verificationScore")
    __properties: ClassVar[List[str]] = ["externalId", "facePartialScore", "faceScore", "fingerprintEmbeddingPartialScore", "fingerprintEmbeddingScore", "fingerprintPartialScore", "fingerprintScore", "id", "irisPartialScore", "irisScore", "originExternalId", "palmprintPartialScore", "palmprintScore", "verificationScore"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VerificationCandidate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VerificationCandidate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "externalId": obj.get("externalId"),
            "faceScore": obj.get("faceScore"),
            "fingerprintEmbeddingScore": obj.get("fingerprintEmbeddingScore"),
            "fingerprintScore": obj.get("fingerprintScore"),
            "id": obj.get("id"),
            "irisScore": obj.get("irisScore"),
            "originExternalId": obj.get("originExternalId"),
            "palmprintScore": obj.get("palmprintScore"),
            "verificationScore": obj.get("verificationScore")
        })
        return _obj


