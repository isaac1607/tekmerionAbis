# coding: utf-8

"""
    ABIS REST API

    Innovatrics ABIS proprietary REST API

    The version of the OpenAPI document: 6.62.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FingerprintImageQualities(BaseModel):
    """
    FingerprintImageQualities
    """ # noqa: E501
    created_at: Optional[datetime] = Field(default=None, description="A date-time format in the ISO-8601 calendar system", alias="createdAt")
    fingerprint_presence: Optional[StrictInt] = Field(default=None, alias="fingerprintPresence")
    id_kit_version: Optional[StrictStr] = Field(default=None, alias="idKitVersion")
    image_intensity: Optional[StrictInt] = Field(default=None, alias="imageIntensity")
    image_quality: Optional[StrictInt] = Field(default=None, alias="imageQuality")
    nfiq1: Optional[StrictInt] = None
    nfiq2: Optional[StrictInt] = None
    placement: Optional[StrictInt] = None
    seg_lib_version: Optional[StrictStr] = Field(default=None, alias="segLibVersion")
    updated_at: Optional[datetime] = Field(default=None, description="A date-time format in the ISO-8601 calendar system", alias="updatedAt")
    used_dpi: Optional[StrictInt] = Field(default=None, alias="usedDpi")
    valid: Optional[StrictBool] = None
    was_fingerprint_segmented: Optional[StrictBool] = Field(default=None, alias="wasFingerprintSegmented")
    was_multiscaled: Optional[StrictBool] = Field(default=None, alias="wasMultiscaled")
    __properties: ClassVar[List[str]] = ["createdAt", "fingerprintPresence", "idKitVersion", "imageIntensity", "imageQuality", "nfiq1", "nfiq2", "placement", "segLibVersion", "updatedAt", "usedDpi", "valid", "wasFingerprintSegmented", "wasMultiscaled"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FingerprintImageQualities from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "created_at",
                "fingerprint_presence",
                "id_kit_version",
                "image_intensity",
                "image_quality",
                "nfiq1",
                "nfiq2",
                "placement",
                "seg_lib_version",
                "updated_at",
                "used_dpi",
                "valid",
                "was_fingerprint_segmented",
                "was_multiscaled",
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FingerprintImageQualities from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdAt": obj.get("createdAt"),
            "fingerprintPresence": obj.get("fingerprintPresence"),
            "idKitVersion": obj.get("idKitVersion"),
            "imageIntensity": obj.get("imageIntensity"),
            "imageQuality": obj.get("imageQuality"),
            "nfiq1": obj.get("nfiq1"),
            "nfiq2": obj.get("nfiq2"),
            "placement": obj.get("placement"),
            "segLibVersion": obj.get("segLibVersion"),
            "updatedAt": obj.get("updatedAt"),
            "usedDpi": obj.get("usedDpi"),
            "valid": obj.get("valid"),
            "wasFingerprintSegmented": obj.get("wasFingerprintSegmented"),
            "wasMultiscaled": obj.get("wasMultiscaled")
        })
        return _obj


