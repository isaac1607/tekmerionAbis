# coding: utf-8

"""
    ABIS REST API

    Innovatrics ABIS proprietary REST API

    The version of the OpenAPI document: 6.62.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from abis.rest.client.models.characteristic_image import CharacteristicImage
from abis.rest.client.models.smt_description_detail import SMTDescriptionDetail

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SmtCharacteristic(BaseModel):
    """
    SmtCharacteristic
    """ # noqa: E501
    capture_date: Optional[datetime] = Field(default=None, description="A date-time format in the ISO-8601 calendar system", alias="captureDate")
    image: Optional[CharacteristicImage] = None
    smt_codes: Optional[List[str]] = Field(default=None, alias="smtCodes")
    smt_description_details: Optional[List[SMTDescriptionDetail]] = Field(default=None, alias="smtDescriptionDetails")
    type_code: StrictStr = Field(description="Enumeration of SMT characteristic type.", alias="typeCode")
    __properties: ClassVar[List[str]] = ["captureDate", "image", "smtCodes", "smtDescriptionDetails", "typeCode"]

    @field_validator('type_code')
    def type_code_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('SCAR', 'MARK', 'TATTOO'):
            raise ValueError("must be one of enum values ('SCAR', 'MARK', 'TATTOO')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SmtCharacteristic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SmtCharacteristic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "captureDate": obj.get("captureDate"),
            "image": CharacteristicImage.from_dict(obj.get("image")) if obj.get("image") is not None else None,
            "typeCode": obj.get("typeCode")
        })
        return _obj


